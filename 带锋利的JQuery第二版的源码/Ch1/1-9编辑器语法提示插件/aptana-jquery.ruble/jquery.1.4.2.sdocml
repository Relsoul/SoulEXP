<?xml version="1.0"?>
<!-- Aptana Studio support for the jQuery 1.4.2 JavaScript Libary -->
<javascript>
  <aliases>
  <alias name="$" type="jQuery" />
  </aliases>
  <class type="jQuery">
    <constructors>
      <constructor scope="">
        <description>&amp;lt;p&amp;gt;You can pass in plain HTML Strings written by hand, create them using some template engine or plugin, or load them via AJAX. When creating single elements use the closing tag or XHTML format.  For example, to create a span use $("&amp;lt;span/&amp;gt;"). As of jQuery 1.3 this syntax is completely equivalent to $(document.createElement("span")).&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="html" usage="required" type="String">
            <description>A string of HTML to create on the fly.</description>
          </parameter>
          <parameter name="ownerDocument" usage="optional" type="document">
            <description>A document in which the new elements will be created</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Creates a div element (and all of its contents) dynamically, and appends it to the body element. Internally, an element is created and its innerHTML property set to the given markup. It is therefore both quite flexible and limited.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;").appendTo("body")
            &lt;/pre&gt;
        </example>
        </examples>
      </constructor>
      <constructor scope="">
        <description>This function also accepts XML Documents and Window objects as valid arguments (even though they are not DOM Elements).</description>
        <parameters>
          <parameter name="elements" usage="required" type="Element, Array&lt;Element&gt;">
            <description>DOM element(s) to be encapsulated by a jQuery object.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Sets the background color of the page to black.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(document.body).css( "background", "black" );
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Hides all the input elements within a form.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(myForm.elements).hide()
            &lt;/pre&gt;
        </example>
        </examples>
      </constructor>
      <constructor scope="">
        <description>Allows you to bind a function to be executed when the DOM document has finished loading. This function behaves just like $(document).ready(), in that it should be used to wrap other $() operations on your page that depend on the DOM being ready to be operated on. While this function is, technically, chainable - there really isn't much use for chaining against it.

You can have as many $(document).ready events on your page as you like.

See ready(Function) for details about the ready event. </description>
        <parameters>
          <parameter name="callback" usage="required" type="Function">
            <description>The function to execute when the DOM is ready.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Executes the function when the DOM is ready to be used.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(function(){
  // Document is ready
});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Uses both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias.
            &lt;/p&gt;
        
            &lt;pre&gt;
            jQuery(function($) {
  // Your code using failsafe $ alias here...
});
            &lt;/pre&gt;
        </example>
        </examples>
      </constructor>
      <constructor scope="">
        <description>The core functionality of jQuery centers around this function. Everything in jQuery is based upon this, or uses this in some way. The most basic use of this function is to pass in an expression (usually consisting of CSS), which then finds all matching elements.

By default, if no context is specified, $() looks for DOM elements within the context of the current HTML document. If you do specify a context, such as a DOM element or jQuery object, the expression will be matched against the contents of that context.

See &amp;lt;a href='Selectors'&amp;gt;Selectors&amp;lt;/a&amp;gt; for the allowed CSS syntax for expressions. </description>
        <parameters>
          <parameter name="expression" usage="required" type="String">
            <description>An expression to search with.</description>
          </parameter>
          <parameter name="context" usage="optional" type="Element, jQuery">
            <description>A DOM Element, Document or jQuery to use as context</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Finds all p elements that are children of a div element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("div &amp;gt; p").css("border", "1px solid gray");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;one&amp;lt;/p&amp;gt; &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;two&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;p&amp;gt;three&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Finds all inputs of type radio within the first form in the document.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("input:radio", document.forms[0]);
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Finds all div elements within an XML document from an AJAX response.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("div", xml.responseXML);
            &lt;/pre&gt;
        </example>
        </examples>
      </constructor>
    </constructors>
    <properties>
      <property name="context" type="Element" scope="instance">
        <description>&amp;lt;p&amp;gt;Should be used in conjunction with selector to determine the exact query used. These two properties are mostly useful to plugin developers.&amp;lt;/p&amp;gt;</description>
        <examples>
          <example>
            &lt;p&gt;
            Determine the exact context used.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $("ul")
  .append("&amp;lt;li&amp;gt;" + $("ul").context + "&amp;lt;/li&amp;gt;")
  .append("&amp;lt;li&amp;gt;" + $("ul", document.body).context.nodeName + "&amp;lt;/li&amp;gt;");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            Context:&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </property>
      <property name="jQuery.boxModel" type="Boolean" scope="static">
        <description/>
        <examples>
          <example>
            &lt;p&gt;
            Returns the box model for the iframe.
            &lt;/p&gt;
        
            &lt;pre&gt;
            

    $("p").html("The box model for this iframe is: &amp;lt;span&amp;gt;" +
                jQuery.boxModel + "&amp;lt;/span&amp;gt;");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Returns false if the page is in QuirksMode in Internet Explorer
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.boxModel
            &lt;/pre&gt;
        </example>
        </examples>
      </property>
      <property name="jQuery.browser" type="Map" scope="static">
        <description>Available flags are:
* safari
* opera
* msie
* mozilla

This property is available before the DOM is ready, therefore you can use it to add ready events only for certain browsers.

There are situations where object detection is not reliable enough, in such cases it makes sense to use browser detection.

A combination of browser and object detection yields quite reliable results. </description>
        <examples>
          <example>
            &lt;p&gt;
            Show the browser info.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    jQuery.each(jQuery.browser, function(i, val) {
      $("&amp;lt;div&amp;gt;" + i + " : &amp;lt;span&amp;gt;" + val + "&amp;lt;/span&amp;gt;")
                .appendTo(document.body);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Browser info:&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Returns true if the current useragent is some version of Microsoft's Internet Explorer.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.browser.msie
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Alerts "this is safari!" only for safari browsers
            &lt;/p&gt;
        
            &lt;pre&gt;
            if ($.browser.safari) {
    alert("this is safari!");
 }
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Alerts "Do stuff for firefox 3" only for firefox 3 browsers.
            &lt;/p&gt;
        
            &lt;pre&gt;
            jQuery.each(jQuery.browser, function(i, val) {
   if(i=="mozilla" &amp;&amp; jQuery.browser.version.substr(0,3)=="1.9")
      alert("Do stuff for firefox 3")
 });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Set a CSS property to specific browser.
            &lt;/p&gt;
        
            &lt;pre&gt;
            jQuery.each(jQuery.browser, function(i) {
   if($.browser.msie){
      $("#div ul li").css("display","inline");
   }else{
      $("#div ul li").css("display","inline-table");
   }
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </property>
      <property name="jQuery.browser.version" type="String" scope="static">
        <description>Here are some typical results:
* Internet Explorer: 6.0, 7.0
* Mozilla/Firefox/Flock/Camino: 1.7.12, 1.8.1.3, 1.9
* Opera: 9.20
* Safari/Webkit: 312.8, 418.9</description>
        <examples>
          <example>
            &lt;p&gt;
            Returns the browser version.
            &lt;/p&gt;
        
            &lt;pre&gt;
            

    $("p").html("The browser version is: &amp;lt;span&amp;gt;" +
                jQuery.browser.version + "&amp;lt;/span&amp;gt;");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Alerts the version of IE that is being used
            &lt;/p&gt;
        
            &lt;pre&gt;
            if ( $.browser.msie )
  alert( $.browser.version );
}
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Often you only care about the "major number," the whole number. This can be accomplished with JavaScript's built-in parseInt() function:
            &lt;/p&gt;
        
            &lt;pre&gt;
            
if (jQuery.browser.msie) {
  alert(parseInt(jQuery.browser.version));
}

            &lt;/pre&gt;
        </example>
        </examples>
      </property>
      <property name="jQuery.fx.off" type="Boolean" scope="static">
        <description>&amp;lt;p&amp;gt;Setting this property to true will disable all animations from occurring (the effect will happen instantaneously, instead). This may be desirable for a couple reasons:&amp;lt;/p&amp;gt;
# You're using jQuery on a low-resource device.
# Some of your users are encountering [http://www.jdeegan.phlegethon.org/turn_off_animation.html accessibility problems] with the animations.
&amp;lt;p&amp;gt;Animations can be turned back on by setting the property to false.&amp;lt;/p&amp;gt;</description>
        <examples>
          <example>
            &lt;p&gt;
            Run a disabled animation
            &lt;/p&gt;
        
            &lt;pre&gt;
             
    jQuery.fx.off = true;
    $("input").click(function(){
      $("div").toggle("slow");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;input type="button" value="Run"/&amp;gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </property>
      <property name="jQuery.support" type="Object" scope="static">
        <description>&amp;lt;p&amp;gt;jQuery comes with a number of properties included, you should feel free to add your own. Many of these properties are rather low-level so it's doubtful that they'll be useful in general day-to-day development, but mostly used by plugin and core developers.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The values of all the support properties are determined using feature detection (and do not use any form of browser sniffing). There are some excellent resources that explain how feature detection works:&amp;lt;/p&amp;gt;
* http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting
* http://yura.thinkweb2.com/cft/
* http://www.jibbering.com/faq/faq_notes/not_browser_detect.html
&amp;lt;p&amp;gt;The tests included in jQuery.support are as follows:&amp;lt;/p&amp;gt;
* '''boxModel''': Is equal to true if the page and browser are rendering according to the [http://www.w3.org/TR/REC-CSS2/box.html W3C CSS Box Model] (is currently false in IE 6 and 7 when they are in Quirks Mode). This property is null until document ready occurs.
* '''cssFloat''': Is equal to true if style.cssFloat is used to access the current CSS float value (is currently false in IE, it uses styleFloat instead).
* '''hrefNormalized''': Is equal to true if the browser leaves intact the results from getAttribute("href")(is currently false in IE, the URLs are normalized).
* '''htmlSerialize''': Is equal to true if the browser properly serializes link elements when innerHTML is used (is currently false in IE).
* '''leadingWhitespace''': Is equal to true if the browser preserves leading whitespace when innerHTML is used (is currently false in IE 6-8).
* '''noCloneEvent''': Is equal to true if the browser does not clone event handlers when elements are cloned (is currently false in IE).
* '''objectAll''': Is equal to true if doing getElementsByTagName("*") on an object element returns all descendant elements (is currently false in IE 7).
* '''opacity''': Is equal to true if a browser can properly interpret the opacity style property (is currently false in IE, it uses alpha filters instead).
* '''scriptEval''': Is equal to true if using appendChild/createTextNode to inject inline scripts executes them (is currently false in IE, it uses .text to insert executable scripts).
* '''style''': Is equal to true if getAttribute("style") is able to return the inline style specified by an element (is currently false in IE - it uses cssText instead).
* '''tbody''': Is equal to true if the browser allows table elements without tbody elements (is currently false in IE, which automatically inserts tbody if it is not present).</description>
        <examples>
          <example>
            &lt;p&gt;
            Returns the box model for the iframe.
            &lt;/p&gt;
        
            &lt;pre&gt;
            

    $("p").html("This frame uses the W3C box model: &amp;lt;span&amp;gt;" +
                jQuery.support.boxModel + "&amp;lt;/span&amp;gt;");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Returns false if the page is in QuirksMode in Internet Explorer
            &lt;/p&gt;
        
            &lt;pre&gt;
            jQuery.support.boxModel
            &lt;/pre&gt;
        </example>
        </examples>
      </property>
      <property name="length" type="Number" scope="instance">
        <description>The number of elements currently matched. The &amp;lt;a href='Core/size'&amp;gt;size&amp;lt;/a&amp;gt; function will return the same value.</description>
        <examples>
          <example>
            &lt;p&gt;
            Count the divs.  Click to add more.
            &lt;/p&gt;
        
            &lt;pre&gt;
             
    $(document.body).click(function () {
      $(document.body).append($("&amp;lt;div&amp;gt;"));
      var n = $("div").length;
      $("span").text("There are " + n + " divs." +
                     "Click to add more.");
    }).trigger('click'); // trigger the click to start

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </property>
      <property name="selector" type="String" scope="instance">
        <description>&amp;lt;p&amp;gt;Should be used in conjunction with context to determine the exact query used. These two properties are mostly useful to plugin developers.&amp;lt;/p&amp;gt;</description>
        <examples>
          <example>
            &lt;p&gt;
            Determine the selector used.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $("ul")
  .append("&amp;lt;li&amp;gt;" + $("ul").selector + "&amp;lt;/li&amp;gt;")
  .append("&amp;lt;li&amp;gt;" + $("ul li").selector + "&amp;lt;/li&amp;gt;")
  .append("&amp;lt;li&amp;gt;" + $("div#foo ul:not([class])").selector + "&amp;lt;/li&amp;gt;");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            Some selectors:&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </property>
    </properties>
    <methods>
      <method name="add" scope="instance">
        <description/>
        <parameters>
          <parameter name="expr" usage="required" type="String, DOMElement, Array&lt;DOMElement&gt;">
            <description>An expression whose matched elements are added for String, a string of HTML to create on the fly for DOMElement or one or more Elements to add if an Array.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").css("border", "2px solid red")
            .add("p")
            .css("background", "yellow");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;Added this... (notice no border)&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Adds more elements, matched by the given expression, to the set of matched elements.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").add("span").css("background", "yellow");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;span&amp;gt;Hello Again&amp;lt;/span&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Adds more elements, created on the fly, to the set of matched elements.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").clone().add("&amp;lt;span&amp;gt;Again&amp;lt;/span&amp;gt;").appendTo(document.body);
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Adds one or more Elements to the set of matched elements.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").add(document.getElementById("a")).css("background", "yellow");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;span id="a"&amp;gt;Hello Again&amp;lt;/span&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Demonstrates how to add (or push) elements to an existing collection
            &lt;/p&gt;
        
            &lt;pre&gt;
            var collection = $("p");
// capture the new collection
collection = collection.add(document.getElementById("a"));
collection.css("background", "yellow");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;span id="a"&amp;gt;Hello Again&amp;lt;/span&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="addClass" scope="instance">
        <description/>
        <parameters>
          <parameter name="class" usage="required" type="String">
            <description>One or more classes to add to the elements, these are separated by spaces.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Adds the class 'selected' to the matched elements.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p:last").addClass("selected");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;and&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Goodbye&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Adds the classes 'selected' and 'highlight' to the matched elements.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p:last").addClass("selected highlight");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;and&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Goodbye&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="after" scope="instance">
        <description/>
        <parameters>
          <parameter name="content" usage="required" type="String, Element, jQuery">
            <description>Content to insert after each target.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Inserts some HTML after all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").after("&amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;I would like to say: &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Inserts a DOM element after all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").after( document.createTextNode("Hello") );
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;I would like to say: &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Inserts a jQuery object (similar to an Array of DOM Elements) after all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").after( $("b") );
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt;
  &amp;lt;p&amp;gt;I would like to say: &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="ajaxComplete" scope="instance">
        <description>The XMLHttpRequest and settings used for that request are passed as arguments to the callback.</description>
        <parameters>
          <parameter name="callback" usage="required" type="Function">
            <description>The function to execute.
&amp;lt;pre&amp;gt;function (event, XMLHttpRequest, ajaxOptions) {
  this; // dom element listening
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show a message when an AJAX request completes.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $("#msg").ajaxComplete(function(request, settings){
   $(this).append("&amp;lt;li&amp;gt;Request Complete.&amp;lt;/li&amp;gt;");
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="ajaxError" scope="instance">
        <description>The XMLHttpRequest and settings used for that request are passed as arguments to the callback. A third argument, an exception object, is passed if an exception occured while processing the request.</description>
        <parameters>
          <parameter name="callback" usage="required" type="Function">
            <description>The function to execute.
&amp;lt;pre&amp;gt;function (event, XMLHttpRequest, ajaxOptions, thrownError) {
  // thrownError only passed if an error was caught
  this; // dom element listening
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show a message when an AJAX request fails.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $("#msg").ajaxError(function(event, request, settings){
   $(this).append("&amp;lt;li&amp;gt;Error requesting page " + settings.url + "&amp;lt;/li&amp;gt;");
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="ajaxSend" scope="instance">
        <description>The XMLHttpRequest and settings used for that request are passed as arguments to the callback.</description>
        <parameters>
          <parameter name="callback" usage="required" type="Function">
            <description>The function to execute.
&amp;lt;pre&amp;gt;function (event, XMLHttpRequest, ajaxOptions) {
  this; // dom element listening
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show a message before an AJAX request is sent.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $("#msg").ajaxSend(function(evt, request, settings){
   $(this).append("&amp;lt;li&amp;gt;Starting request at " + settings.url + "&amp;lt;/li&amp;gt;");
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="ajaxStart" scope="instance">
        <description/>
        <parameters>
          <parameter name="callback" usage="required" type="Function">
            <description>The function to execute.
&amp;lt;pre&amp;gt;function () {
  this; // dom element listening
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show a loading message whenever an AJAX request starts (and none is already active).
            &lt;/p&gt;
        
            &lt;pre&gt;
             $("#loading").ajaxStart(function(){
   $(this).show();
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="ajaxStop" scope="instance">
        <description/>
        <parameters>
          <parameter name="callback" usage="required" type="Function">
            <description>The function to execute.
&amp;lt;pre&amp;gt;function () {
  this; // dom element listening
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Hide a loading message after all the AJAX requests have stopped.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $("#loading").ajaxStop(function(){
   $(this).hide();
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="ajaxSuccess" scope="instance">
        <description>The event object, XMLHttpRequest, and settings used for that request are passed as arguments to the callback.</description>
        <parameters>
          <parameter name="callback" usage="required" type="Function">
            <description>The function to execute.
&amp;lt;pre&amp;gt;function (event, XMLHttpRequest, ajaxOptions) {
  this; // dom element listening
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show a message when an AJAX request completes successfully.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $("#msg").ajaxSuccess(function(evt, request, settings){
   $(this).append("&amp;lt;li&amp;gt;Successful Request!&amp;lt;/li&amp;gt;");
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="andSelf" scope="instance">
        <description>Useful for traversing elements, and then adding something that was matched before the last traversal.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Find all divs, and all the paragraphs inside of them, and give them both classnames.  Notice the div doesn't have the yellow background color since it didn't use andSelf().
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").find("p").andSelf().addClass("border");
    $("div").find("p").addClass("background");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;First Paragraph&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;Second Paragraph&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="animate" scope="instance">
        <description>The key aspect of this function is the object of style properties that will be animated, and to what end. Each key within the object represents a style property that will also be animated (e.g. "height", "top", or "opacity").

Note that properties should be specified using camel case, e.g. "marginLeft" instead of "margin-left."

The value associated with the key represents to what end the property will be animated. If a number is provided as the value, then the style property will be transitioned from its current state to that new number. Otherwise if the string "hide", "show", or "toggle" is provided, a default animation will be constructed for that property. </description>
        <parameters>
          <parameter name="params" usage="required" type="Options">
            <description>A set of style attributes that you wish to animate, and to what end.</description>
          </parameter>
          <parameter name="options" usage="required" type="Options">
            <description>A set of options with which to configure the animation.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            The first button shows how an unqueued animation works.  It expands the div out to 90% width '''while''' the font-size is increasing. Once the font-size change is complete, the border animation will begin.

The second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("#go1").click(function(){
      $("#block1").animate( { width:"90%" }, { queue:false, duration:3000 } )
         .animate( { fontSize:"24px" }, 1500 )
         .animate( { borderRightWidth:"15px" }, 1500);
    });

    $("#go2").click(function(){
      $("#block2").animate( { width:"90%"}, 1000 )
         .animate( { fontSize:"24px" } , 1000 )
         .animate( { borderLeftWidth:"15px" }, 1000);
    });

    $("#go3").click(function(){
      $("#go1").add("#go2").click();
    });

    $("#go4").click(function(){
      $("div").css({width:"", fontSize:"", borderWidth:""});
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="go1"&amp;gt;&amp;raquo; Animate Block1&amp;lt;/button&amp;gt;
  &amp;lt;button id="go2"&amp;gt;&amp;raquo; Animate Block2&amp;lt;/button&amp;gt;
  &amp;lt;button id="go3"&amp;gt;&amp;raquo; Animate Both&amp;lt;/button&amp;gt;
  &amp;lt;button id="go4"&amp;gt;&amp;raquo; Reset&amp;lt;/button&amp;gt;
  &amp;lt;div id="block1"&amp;gt;Block1&amp;lt;/div&amp;gt;
  &amp;lt;div id="block2"&amp;gt;Block2&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").animate({
      "height": "toggle", "opacity": "toggle"
    }, { duration: "slow" });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Animates all paragraph to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.  It also will do it ''outside'' the queue, meaning it will automatically start without waiting for its turn.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").animate({
      left: "50px", opacity: 1
    }, { duration: 500, queue: false });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").animate({
      "opacity": "show"
    }, { "duration": "slow", "easing": "easein" });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            An example of using a callback function.  The first argument is an array of CSS properties, the second specifies that the animation should take 1000 milliseconds to complete, the third states the easing type, and the fourth argument is an anonymous callback function. 
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").animate({
       height:200, width:400, opacity: .5
    }, 1000, "linear", function(){alert("all done");} );

            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="animate" scope="instance">
        <description>The key aspect of this function is the object of style properties that will be animated, and to what end. Each key within the object represents a style property that will also be animated (for example: "height", "top", or "opacity").

Note that properties should be specified using camel case, e.g. "marginLeft" instead of "margin-left."

The value associated with the key represents to what end the property will be animated. If a number is provided as the value, then the style property will be transitioned from its current state to that new number. Otherwise if the string "hide", "show", or "toggle" is provided, a default animation will be constructed for that property.  Only properties that take numeric values are supported (e.g. backgroundColor is not supported).

&amp;lt;p&amp;gt;As of jQuery 1.2 you can now animate properties by em and % (where applicable). Additionally, in jQuery 1.2, you can now do relative animations - specifying a "''+=''" or "''-=''" in front of the property value moves the element positively or negatively, relative to its current position.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;As of jQuery 1.3 if you specify an animation duration of 0 then the animation will synchronously set the elements to their end state (this is different from old versions where there would be a brief, asynchronous, delay before the end state would be set).&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="params" usage="required" type="Options">
            <description>A set of style attributes that you wish to animate, and to what end.</description>
          </parameter>
          <parameter name="duration" usage="optional" type="String, Number">
            <description>A string representing one of the three predefined speeds ("slow", "normal", or "fast") or the number of milliseconds to run the animation (e.g. 1000).</description>
          </parameter>
          <parameter name="easing" usage="optional" type="String">
            <description>The name of the easing effect that you want to use (plugin required). There are two built-in values, "linear" and "swing".</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the animation completes, executes once for each element animated against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Click the button to animate the div with a number of different properties.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    // Using multiple unit types within one animation.
    $("#go").click(function(){
      $("#block").animate({ 
        width: "70%",
        opacity: 0.4,
        marginLeft: "0.6in",
        fontSize: "3em", 
        borderWidth: "10px"
      }, 1500 );
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="go"&amp;gt;&amp;raquo; Run&amp;lt;/button&amp;gt;
  &amp;lt;div id="block"&amp;gt;Hello!&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Shows a div animate with a relative move.  Click several times on the buttons to see the relative animations queued up.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("#right").click(function(){
      $(".block").animate({"left": "+=50px"}, "slow");
    });

    $("#left").click(function(){
      $(".block").animate({"left": "-=50px"}, "slow");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="left"&amp;gt;&amp;laquo;&amp;lt;/button&amp;gt; &amp;lt;button id="right"&amp;gt;&amp;raquo;&amp;lt;/button&amp;gt;
&amp;lt;div class="block"&amp;gt;&amp;lt;/div&amp;gt;

            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").animate({
      "height": "toggle", "opacity": "toggle"
    }, "slow");
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Animates all paragraph to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").animate({
      "left": "50", "opacity": 1
    }, 500);

            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.  Note, this code will do nothing unless the paragraph element is hidden.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").animate({
      "opacity": "show"
    }, "slow", "easein");
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="append" scope="instance">
        <description>This operation is similar to doing an appendChild to all the specified elements, adding them into the document.</description>
        <parameters>
          <parameter name="content" usage="required" type="String, Element, jQuery">
            <description>Content to append to the target.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Appends some HTML to all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").append("&amp;lt;strong&amp;gt;Hello&amp;lt;/strong&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;I would like to say: &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Appends an Element to all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").append(document.createTextNode("Hello"));
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;I would like to say: &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").append( $("strong") );
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;strong&amp;gt;Hello&amp;lt;/strong&amp;gt;&amp;lt;p&amp;gt;I would like to say: &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="appendTo" scope="instance">
        <description>This operation is, essentially, the reverse of doing a regular $(A).append(B), in that instead of appending B to A, you're appending A to B.</description>
        <parameters>
          <parameter name="selector" usage="required" type="Selector">
            <description>target to which the content will be appended.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Appends all spans to the element with the ID "foo"
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("span").appendTo("#foo"); // check append() examples
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;span&amp;gt;I have nothing more to say... &amp;lt;/span&amp;gt;
  &amp;lt;div id="foo"&amp;gt;FOO! &amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="attr" scope="instance">
        <description/>
        <parameters>
          <parameter name="name" usage="required" type="String">
            <description>The name of the property to access.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Finds the title attribute of the first &amp;lt;em&amp;gt; in the page.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var title = $("em").attr("title");
    $("div").text(title);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    Once there was a &amp;lt;em title="huge, gigantic"&amp;gt;large&amp;lt;/em&amp;gt; dinosaur...
  &amp;lt;/p&amp;gt;
  The title of the emphasis is:&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="attr" scope="instance">
        <description>This serves as the best way to set a large number of properties on all matched elements. Note that you must use 'className' as key if you want to set the class-Attribute. Or use .addClass( class ) or .removeClass( class ). Keep in mind this recursively calls attr( key, value ) or attr ( key, fn ), so if one of the properties you are passing is a function, the function will be evaluated and not stored as the attribute itself.</description>
        <parameters>
          <parameter name="properties" usage="required" type="Map">
            <description>Key/value pairs to set as object properties.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Set some attributes for all &amp;lt;img&amp;gt;s in the page.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("img").attr({ 
          src: "/images/hat.gif",
          title: "jQuery",
          alt: "jQuery Logo"
        });
    $("div").text($("img").attr("alt"));

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;img /&amp;gt;
  &amp;lt;img /&amp;gt;
  &amp;lt;img /&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;B&amp;gt;Attribute of Ajax&amp;lt;/B&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="attr" scope="instance">
        <description/>
        <parameters>
          <parameter name="key" usage="required" type="String">
            <description>The name of the property to set.</description>
          </parameter>
          <parameter name="value" usage="required" type="Object">
            <description>The value to set the property to.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Disables buttons greater than the 1st button.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("button:gt(1)").attr("disabled","disabled");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;0th Button&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;1st Button&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;2nd Button&amp;lt;/button&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="attr" scope="instance">
        <description>Instead of supplying a string value as described  &amp;lt;a href='#keyvalue'&amp;gt;above&amp;lt;/a&amp;gt;, a function is provided that computes the value.</description>
        <parameters>
          <parameter name="key" usage="required" type="String">
            <description>The name of the property to set.</description>
          </parameter>
          <parameter name="fn" usage="required" type="Function">
            <description>A function returning the value to set. Scope: Current element, argument: Index of current element
&amp;lt;pre&amp;gt;function callback(indexArray) {
  // indexArray == position in the jQuery object
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Sets id for divs based on the position in the page.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").attr("id", function (arr) {
          return "div-id" + arr;
        })
        .each(function () {
          $("span", this).html("(ID = '&amp;lt;b&amp;gt;" + this.id + "&amp;lt;/b&amp;gt;')");
        });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;Zero-th &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;First &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Second &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Sets src attribute from title attribute on the image.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("img").attr("src", function() { 
          return "/images/" + this.title; 
        });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;img title="hat.gif"/&amp;gt;
  &amp;lt;img title="hat-old.gif"/&amp;gt;
  &amp;lt;img title="hat2-old.gif"/&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="before" scope="instance">
        <description/>
        <parameters>
          <parameter name="content" usage="required" type="String, Element, jQuery">
            <description>Content to insert before each target.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Inserts some HTML before all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").before("&amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt; is what I said...&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Inserts a DOM element before all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").before( document.createTextNode("Hello") );
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt; is what I said...&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Inserts a jQuery object (similar to an Array of DOM Elements) before all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").before( $("b") );
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt; is what I said...&amp;lt;/p&amp;gt;&amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="bind" scope="instance">
        <description>'''Possible event values:''' &amp;lt;code&amp;gt;blur&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;focus&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;load&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;resize&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;scroll&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;unload&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;beforeunload&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;click&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;dblclick&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt; mousedown&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;mouseup&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;mousemove&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;mouseover&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;mouseout&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;mouseenter&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;mouseleave&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;change&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;select&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt; submit&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;keydown&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;keypress&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;keyup&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;error&amp;lt;/code&amp;gt;

The event handler is passed an &amp;lt;a href='Events/jQuery.Event'&amp;gt;event object&amp;lt;/a&amp;gt; that you can use to prevent default behaviour. To stop both default action and event bubbling, your handler has to return false. Note that this will prevent handlers on parent elements from running but not other jQuery handlers on the same element. The full list of properties that are available on the event object can be found in the &amp;lt;a href='Events/jQuery.Event'&amp;gt;jQuery.Event&amp;lt;/a&amp;gt; documentation.

&amp;lt;p&amp;gt;In most cases, you can define your event handlers as anonymous functions (see first example). In cases where that is not possible, you can pass additional data as the second parameter (and the handler function as the third), see second example.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;jQuery also supports &amp;lt;a href='Namespaced_Events'&amp;gt;namespaced events&amp;lt;/a&amp;gt;. These allow you to trigger or unbind specific groups of bound handlers without having to reference them directly.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="type" usage="required" type="String">
            <description>One or more event types separated by a space</description>
          </parameter>
          <parameter name="data" usage="optional" type="Object">
            <description>Additional data passed to the event handler as event.data</description>
          </parameter>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the event on each of the set of matched elements, passed an &amp;lt;a href='Events/jQuery.Event'&amp;gt;event object&amp;lt;/a&amp;gt;.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Handle click and double-click for the paragraph.  Note: the coordinates are window relative so in this case relative to the demo iframe.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").bind("click", function(&amp;lt;a href='Events/jQuery.Event'&amp;gt;e&amp;lt;/a&amp;gt;){
      var str = "( " + e.pageX + ", " + e.pageY + " )";
      $("span").text("Click happened! " + str);
    });
    $("p").bind("dblclick", function(){
      $("span").text("Double-click happened in " + this.tagName);
    });
    $("p").bind("mouseenter mouseleave", function(e){
        $(this).toggleClass("over");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Click or double click here.&amp;lt;/p&amp;gt;
  &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To display each paragraph's text in an alert box whenever it is clicked:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").bind("click", function(){
  alert( $(this).text() );
});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            You can pass some extra data before the event handler:
            &lt;/p&gt;
        
            &lt;pre&gt;
            function handler(event) {
  alert(event.data.foo);
}
$("p").bind("click", {foo: "bar"}, handler)
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To cancel a default action and prevent it from bubbling up, return false:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("form").bind("submit", function() { return false; })
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To cancel only the default action by using the preventDefault method.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("form").bind("submit", function(event){
  event.preventDefault();
});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Stop only an event from bubbling by using the stopPropagation method.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("form").bind("submit", function(event){
  event.stopPropagation();
});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Can bind custom events too.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").bind("myCustomEvent", function(e, myName, myValue){
      $(this).text(myName + ", hi there!");
      $("span").stop().css("opacity", 1)
               .text("myName = " + myName)
               .fadeIn(30).fadeOut(1000);
    });
    $("button").click(function () {
      $("p").trigger("myCustomEvent", [ "John" ]);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Has an attached custom event.&amp;lt;/p&amp;gt;
  &amp;lt;button&amp;gt;Trigger custom event&amp;lt;/button&amp;gt;
  &amp;lt;span style="display:none;"&amp;gt;&amp;lt;/span&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="blur" scope="instance">
        <description>This causes all of the functions that have been bound to that blur event to be executed, and calls the browser's default blur action on the matching element(s). This default action can be prevented by returning false from one of the functions bound to the blur event. The blur event usually fires when an element loses focus either via the pointing device or by tabbing navigation</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To triggers the blur event on all paragraphs:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").blur();
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="blur" scope="instance">
        <description>The blur event fires when an element loses focus either via the pointing device or by tabbing navigation.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the blur event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Fire blur.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("input").blur(function () {
         $(this).next("span").css('display','inline').fadeOut(1000);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;&amp;lt;input type="text" /&amp;gt; &amp;lt;span&amp;gt;blur fire&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;input type="password" /&amp;gt; &amp;lt;span&amp;gt;blur fire&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="change" scope="instance">
        <description>This causes all of the functions that have been bound to that change event to be executed, and calls the browser's default change action on the matching element(s). This default action can be prevented by returning false from one of the functions bound to the change event. The change event usually fires when a control loses the input focus and its value has been modified since gaining focus.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
      </method>
      <method name="change" scope="instance">
        <description>The change event fires when a control loses the input focus and its value has been modified since gaining focus.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the change event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("select").change(function () {
          var str = "";
          $("select option:selected").each(function () {
                str += $(this).text() + " ";
              });
          $("div").text(str);
        })
        .change();

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;select name="sweets" multiple="multiple"&amp;gt;
    &amp;lt;option&amp;gt;Chocolate&amp;lt;/option&amp;gt;
    &amp;lt;option selected="selected"&amp;gt;Candy&amp;lt;/option&amp;gt;
    &amp;lt;option&amp;gt;Taffy&amp;lt;/option&amp;gt;
    &amp;lt;option selected="selected"&amp;gt;Caramel&amp;lt;/option&amp;gt;
    &amp;lt;option&amp;gt;Fudge&amp;lt;/option&amp;gt;
    &amp;lt;option&amp;gt;Cookie&amp;lt;/option&amp;gt;
  &amp;lt;/select&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To add a validity test to all text input elements:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("input[@type='text']").change( function() {
  // check input ($(this).val()) for validity here
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="children" scope="instance">
        <description>This set can be filtered with an optional expression that will cause only elements matching the selector to be collected. Also note: while parents() will look at all ancestors, children() will only consider immediate child elements.</description>
        <parameters>
          <parameter name="expr" usage="optional" type="String">
            <description>An expression to filter the child Elements with.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Find all children of the clicked element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("#container").click(function (e) {
      $("*").removeClass("hilite");
      var $kids = $(e.target).children();
      var len = $kids.addClass("hilite").length;

      $("#results span:first").text(len);
      $("#results span:last").text(e.target.tagName);

      e.preventDefault();
      return false;
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div id="container"&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;This &amp;lt;span&amp;gt;is the &amp;lt;em&amp;gt;way&amp;lt;/em&amp;gt; we&amp;lt;/span&amp;gt; 
      write &amp;lt;em&amp;gt;the&amp;lt;/em&amp;gt; demo,&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;a href="#"&amp;gt;&amp;lt;b&amp;gt;w&amp;lt;/b&amp;gt;rit&amp;lt;b&amp;gt;e&amp;lt;/b&amp;gt;&amp;lt;/a&amp;gt; the &amp;lt;span&amp;gt;demo,&amp;lt;/span&amp;gt; &amp;lt;button&amp;gt;write 
      the&amp;lt;/button&amp;gt; demo,
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
      This &amp;lt;span&amp;gt;the way we &amp;lt;em&amp;gt;write&amp;lt;/em&amp;gt; the &amp;lt;em&amp;gt;demo&amp;lt;/em&amp;gt; so&amp;lt;/span&amp;gt;
      &amp;lt;input type="text" value="early" /&amp;gt; in
    &amp;lt;/div&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;span&amp;gt;t&amp;lt;/span&amp;gt;he &amp;lt;span&amp;gt;m&amp;lt;/span&amp;gt;orning.
      &amp;lt;span id="results"&amp;gt;Found &amp;lt;span&amp;gt;0&amp;lt;/span&amp;gt; children in &amp;lt;span&amp;gt;TAG&amp;lt;/span&amp;gt;.&amp;lt;/span&amp;gt;
    &amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Find all children of each div.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("div").children().css("border-bottom", "3px double red");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello (this is a paragraph)&amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;Hello Again (this span is a child of the a div)&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;And &amp;lt;span&amp;gt;Again&amp;lt;/span&amp;gt; (in another paragraph)&amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;And One Last &amp;lt;span&amp;gt;Time&amp;lt;/span&amp;gt; (most text directly in a div)&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Find all children with a class "selected" of each div.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("div").children(".selected").css("color", "blue");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;
    &amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt;
    &amp;lt;p class="selected"&amp;gt;Hello Again&amp;lt;/p&amp;gt;
    &amp;lt;div class="selected"&amp;gt;And Again&amp;lt;/div&amp;gt;
    &amp;lt;p&amp;gt;And One Last Time&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="click" scope="instance">
        <description>Causes all of the functions that have been bound to that click event to be executed.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To trigger the click event on all of the paragraphs on the page:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").click();
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="click" scope="instance">
        <description>The click event fires when the pointing device button is clicked over an element. A click is defined as a mousedown and mouseup over the same screen location. The sequence of these events is:&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;mousedown&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;mouseup&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;click&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the click event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To hide paragraphs on a page when they are clicked:
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").click(function () { 
      $(this).slideUp(); 
    });
    $("p").hover(function () {
      $(this).addClass("hilite");
    }, function () {
      $(this).removeClass("hilite");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;First Paragraph&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Second Paragraph&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Yet one more Paragraph&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="clone" scope="instance">
        <description>This is useful for moving copies of the elements to another location in the DOM.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Clones all b elements (and selects the clones) and prepends them to all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("b").clone().prependTo("p");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt;&amp;lt;p&amp;gt;, how are you?&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="clone" scope="instance">
        <description>This is useful for moving copies of the elements, and their events, to another location in the DOM.</description>
        <parameters>
          <parameter name="true" usage="required" type="Boolean">
            <description>Set to true to enable cloning of event handlers.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Create a button that's able to clone itself - and have the clones themselves be clonable.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function(){
      $(this).clone(true).insertAfter(this);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Clone Me!&amp;lt;/button&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="closest" scope="instance">
        <description>&amp;lt;p&amp;gt;Closest works by first looking at the current element to see if it matches the specified expression, if so it just returns the element itself. If it doesn't match then it will continue to traverse up the document, parent by parent, until an element is found that matches the specified expression. If no matching element is found then none will be returned.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Closest is especially useful for dealing with event delegation.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="expr" usage="optional" type="String">
            <description>An expression to filter the elements with.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show how event delegation can be done with closest.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $(document).bind("click", function (e) {
      $(e.target).closest("li").toggleClass("hilight");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;Click me!&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;You can also &amp;lt;b&amp;gt;Click me!&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="contents" scope="instance">
        <description/>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Find all the text nodes inside a paragraph and wrap them with a bold tag.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").contents().not("[nodeType=1]").wrap("&amp;lt;b/&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello &amp;lt;a href="http://ejohn.org/"&amp;gt;John&amp;lt;/a&amp;gt;, how are you doing?&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Append some new content into an empty iframe.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("iframe").contents().find("body").append("I'm in an iframe!");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;iframe src="/index-blank.html" width="300" height="100"&amp;gt;&amp;lt;/iframe&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="css" scope="instance">
        <description/>
        <parameters>
          <parameter name="name" usage="required" type="String">
            <description>The name of the property to access.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To access the background color of a clicked div.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").click(function () {
      var color = $(this).css("background-color");
      $("#result").html("That div is &amp;lt;span style='color:" +
                         color + ";'&amp;gt;" + color + "&amp;lt;/span&amp;gt;.");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;span id="result"&amp;gt;&amp;nbsp;&amp;lt;/span&amp;gt;
  &amp;lt;div style="background-color:blue;"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div style="background-color:rgb(15,99,30);"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div style="background-color:#123456;"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div style="background-color:#f11;"&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="css" scope="instance">
        <description>This is the best way to set several style properties on all matched elements.</description>
        <parameters>
          <parameter name="properties" usage="required" type="Map">
            <description>Key/value pairs to set as style properties.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To set the color of all paragraphs to red and background to blue:
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").hover(function () {
      $(this).css({'background-color' : 'yellow', 'font-weight' : 'bolder'});
    }, function () {
      var cssObj = {
        'background-color' : '#ddd',
        'font-weight' : '',
        'color' : 'rgb(0,40,244)'
      }
      $(this).css(cssObj);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    Move the mouse over a paragraph.
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    Like this one or the one above.
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            If the property name includes a "-", put it between quotation marks:
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").hover(function () {
      $(this).css({ "background-color":"yellow", "font-weight":"bolder" });
    }, function () {
      var cssObj = {
        "background-color": "#ddd",
        "font-weight": "",
        color: "rgb(0,40,244)"
      }
      $(this).css(cssObj);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    Move the mouse over a paragraph.
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    Like this one or the one above.
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="css" scope="instance">
        <description>If a number is provided, it is automatically converted into a pixel value.</description>
        <parameters>
          <parameter name="name" usage="required" type="String">
            <description>The name of the property to set.</description>
          </parameter>
          <parameter name="value" usage="required" type="String, Number">
            <description>The value to set the property to.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To change the color of any paragraph to red on mouseover event.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").mouseover(function () {
      $(this).css("color","red");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    Just roll the mouse over me.
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    Or me to see a color change.
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To highlight a clicked word in the paragraph.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var words = $("p:first").text().split(" ");
    var text = words.join("&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;");
    $("p:first").html("&amp;lt;span&amp;gt;" + text + "&amp;lt;/span&amp;gt;");
    $("span").click(function () {
      $(this).css("background-color","yellow");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    Once upon a time there was a man
    who lived in a pizza parlor. This
    man just loved pizza and ate it all 
    the time.  He went on to be the
    happiest man in the world.  The end.
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="data" scope="instance">
        <description>&amp;lt;p&amp;gt;If the jQuery collection references multiple elements, the value returned refers to the first element.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;This function is used to get stored data on an element without the risk of a circular reference.  It uses jQuery.data and is new to version 1.2.3.  It can be used for many reasons and jQuery UI uses it heavily. &amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="name" usage="required" type="String">
            <description>Name of the data stored.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Any"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get the data named "blah" stored at for an element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function(e) {
      var value;

      switch ($("button").index(this)) {
        case 0 :
          value = $("div").data("blah");
          break;
        case 1 :
          $("div").data("blah", "hello");
          value = "Stored!";
          break;
        case 2 :
          $("div").data("blah", 86);
          value = "Stored!";
          break;
        case 3 :
          $("div").removeData("blah");
          value = "Removed!";
          break;
      }

      $("span").text("" + value);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;A div&amp;lt;/div&amp;gt;
  &amp;lt;button&amp;gt;Get "blah" from the div&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;Set "blah" to "hello"&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;Set "blah" to 86&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;Remove "blah" from the div&amp;lt;/button&amp;gt;
  &amp;lt;p&amp;gt;The "blah" value of this div is &amp;lt;span&amp;gt;?&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="data" scope="instance">
        <description>&amp;lt;p&amp;gt;If the jQuery collection references multiple elements, the data element is set on all of them.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;This function can be useful for attaching data to elements without having to create a new expando.  It also isn't limited to a string.  The value can be any format.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;It may also be used for getting events attached to elements, however this is unsupported. First paramater being the element, second being the string "events"&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="name" usage="required" type="String">
            <description>Name of the data to store.</description>
          </parameter>
          <parameter name="value" usage="required" type="Any">
            <description>Value to be stored.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Store then retrieve a value from the div element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").data("test", { first: 16, last: "pizza!" });
    $("span:first").text($("div").data("test").first);
    $("span:last").text($("div").data("test").last);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;
    The values stored were 
    &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
    and
    &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="dblclick" scope="instance">
        <description>This causes all of the functions that have been bound to that dblclick event to be executed, and calls the browser's default dblclick action on the matching element(s). This default action can be prevented by returning false from one of the functions bound to the dblclick event. The dblclick event usually fires when the pointing device button is double clicked over an element.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
      </method>
      <method name="dblclick" scope="instance">
        <description>The dblclick event fires when the pointing device button is double clicked over an element</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>The function to bind to the dblclick event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To bind a "Hello World!" alert box the dblclick event on every paragraph on the page:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").dblclick( function () { alert("Hello World!"); });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Double click to toggle background color.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var divdbl = $("div:first");
    divdbl.dblclick(function () { 
      divdbl.toggleClass('dbl'); 
    });


            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;span&amp;gt;Double click the block&amp;lt;/span&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="dequeue" scope="instance">
        <description/>
        <parameters>
          <parameter name="name" usage="optional" type="String">
            <description>The queue name (fx by default)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Use dequeue to end a custom queue function which allows the queue to keep going.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $("div").animate({left:'+=200px'}, 2000);
      $("div").animate({top:'0px'}, 600);
      $("div").queue(function () {
        $(this).toggleClass("red");
        $(this).dequeue();
      });
      $("div").animate({left:'10px', top:'30px'}, 700);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Start&amp;lt;/button&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="die" scope="instance">
        <description>&amp;lt;p&amp;gt;Without any arguments, all bound live events are removed.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;You can also unbind custom events registered with live.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;If the type is provided, all bound live events of that type are removed.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;If the function that was passed to live is provided as the second argument, only that specific event handler is removed.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="type " usage="optional" type="String">
            <description>A live event type to unbind.</description>
          </parameter>
          <parameter name="fn " usage="optional" type="Function">
            <description>A function to unbind from the event on each of the set of matched elements.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Can bind and unbind events to the colored button.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    function aClick() {
      $("div").show().fadeOut("slow");
    }
    $("#bind").click(function () {
      $("#theone").live("click", aClick)
                  .text("Can Click!");
    });
    $("#unbind").click(function () {
      $("#theone").die("click", aClick)
                  .text("Does nothing...");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="theone"&amp;gt;Does nothing...&amp;lt;/button&amp;gt;
  &amp;lt;button id="bind"&amp;gt;Bind Click&amp;lt;/button&amp;gt;
  &amp;lt;button id="unbind"&amp;gt;Unbind Click&amp;lt;/button&amp;gt;
  &amp;lt;div style="display:none;"&amp;gt;Click!&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To unbind all live events from all paragraphs, write:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").die()
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To unbind all live click events from all paragraphs, write:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").die( "click" )
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To unbind just one previously bound handler, pass the function in as the second argument:
            &lt;/p&gt;
        
            &lt;pre&gt;
            var foo = function () {
  // code to handle some kind of event
};

$("p").live("click", foo); // ... now foo will be called when paragraphs are clicked ...

$("p").die("click", foo); // ... foo will no longer be called.
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="each" scope="instance">
        <description>This means that every time the passed-in function is executed (which is once for every element matched) the 'this' keyword points to the specific DOM element.

Additionally, the function, when executed, is passed a single argument representing the position of the element in the matched set (integer, zero-index).

Returning 'false' from within the each function completely stops the loop through all of the elements (this is like using a 'break' with a normal loop). Returning 'true' from within the loop skips to the next iteration (this is like using a 'continue' with a normal loop). </description>
        <parameters>
          <parameter name="callback" usage="required" type="Function">
            <description>The callback to execute for each matched element.
&amp;lt;pre&amp;gt;function callback(index, domElement) {
  this; // this == domElement
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Iterates over three divs and sets their color property.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $(document.body).click(function () {
      $("div").each(function (i) {
        if (this.style.color != "blue") {
          this.style.color = "blue";
        } else {
          this.style.color = "";
        }
      });
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;Click here&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;to iterate through&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;these divs.&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            If you want to have the jQuery object instead of the regular DOM element, use the $(this) function, for example:
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("span").click(function () {
      $("li").each(function(){
        $(this).toggleClass("example");
      });
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            To do list: &amp;lt;span&amp;gt;(click here to change)&amp;lt;/span&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Eat&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Sleep&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Be merry&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            You can use 'return' to break out of each() loops early.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $("div").each(function (index, domEle) {
        // domEle == this
        $(domEle).css("backgroundColor", "yellow"); 
        if ($(this).is("#stop")) {
          $("span").text("Stopped at div index #" + index);
          return false;
        }
      });
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Change colors&amp;lt;/button&amp;gt; 
  &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="stop"&amp;gt;Stop here&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="empty" scope="instance">
        <description>Note that this function starting with 1.2.2 will also remove all event handlers and internally cached data.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Removes all child nodes (including text nodes) from all paragraphs
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $("p").empty();
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    Hello, &amp;lt;span&amp;gt;Person&amp;lt;/span&amp;gt; &amp;lt;a href="javascript:;"&amp;gt;and person&amp;lt;/a&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;button&amp;gt;Call empty() on above paragraph&amp;lt;/button&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="end" scope="instance">
        <description>If there was no destructive operation before, an empty set is returned.

A 'destructive' operation is any operation that changes the set of matched jQuery elements, which means any Traversing function that returns a jQuery object - including &amp;lt;a href='Traversing/add'&amp;gt;add&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/andSelf'&amp;gt;andSelf&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/children'&amp;gt;children&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/filter'&amp;gt;filter&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/find'&amp;gt;find&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/map'&amp;gt;map&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/next'&amp;gt;next&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/nextAll'&amp;gt;nextAll&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/not'&amp;gt;not&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/parent'&amp;gt;parent&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/parents'&amp;gt;parents&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/prev'&amp;gt;prev&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/prevAll'&amp;gt;prevAll&amp;lt;/a&amp;gt;, &amp;lt;a href='Traversing/siblings'&amp;gt;siblings&amp;lt;/a&amp;gt; and &amp;lt;a href='Traversing/slice'&amp;gt;slice&amp;lt;/a&amp;gt; - plus the &amp;lt;a href='Manipulation/clone'&amp;gt;clone&amp;lt;/a&amp;gt; function (from Manipulation). </description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    jQuery.fn.showTags = function (n) {
      var tags = this.map(function () { 
                              return this.tagName; 
                            })
                        .get().join(", ");
      $("b:eq(" + n + ")").text(tags);
      return this;
    };

    $("p").showTags(0)
          .find("span")
          .showTags(1)
          .css("background", "yellow")
          .end()
          .showTags(2)
          .css("font-style", "italic");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    Hi there &amp;lt;span&amp;gt;how&amp;lt;/span&amp;gt; are you &amp;lt;span&amp;gt;doing&amp;lt;/span&amp;gt;?
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    This &amp;lt;span&amp;gt;span&amp;lt;/span&amp;gt; is one of 
    several &amp;lt;span&amp;gt;spans&amp;lt;/span&amp;gt; in this
    &amp;lt;span&amp;gt;sentence&amp;lt;/span&amp;gt;.
  &amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;
    Tags in jQuery object initially: &amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    Tags in jQuery object after find: &amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    Tags in jQuery object after end: &amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;
  &amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").find("span").end().css("border", "2px red solid");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;&amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt;, how are you?&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="eq" scope="instance">
        <description>The position of the element in the set of matched elements starts at 0 and goes to length - 1.</description>
        <parameters>
          <parameter name="position" usage="required" type="Number">
            <description>The index of the element to select.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Reduces the selection to the second selected element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").eq(1).css("color", "red")
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;This is just a test.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;So is this&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="eq" scope="instance">
        <description>Argument is the position of the element in the set of matched elements, starting at 0 and going to length - 1.  Since the query filters out all elements that do not match the given index, providing an invalid index returns an empty set of elements rather than null.</description>
        <parameters>
          <parameter name="index" usage="required" type="Integer">
            <description>The index of the element in the jQuery object.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Turn the div with index 2 blue by adding an appropriate class.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").eq(2).addClass("blue");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="error" scope="instance">
        <description>This causes all of the functions that have been bound to that error event to be executed, and calls the browser's default error action on the matching element(s). This default action can be prevented by returning false from one of the functions bound to the error event. The error event usually fires when an element loses focus either via the pointing device or by tabbing navigation.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
      </method>
      <method name="error" scope="instance">
        <description>&amp;lt;p&amp;gt;There is no public standard for the error event. In most browsers, the window object's error event is triggered when a JavaScript error occurs on the page. An image object's error event is triggered when it is set an invalid src attribute - either a non-existent file, or one with corrupt image data.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;If the event is thrown by the window object, the event handler will be passed three parameters: &amp;lt;ol&amp;gt;&amp;lt;li&amp;gt;A message describing the event ("varName is not defined", "missing operator in expression", etc.),&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;the full URL of the document containing the error, and&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;the line number on which the error occured.&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;If the event handler returns true, it signifies that the event was handled, and the browser raises no errors.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;For more information, see: &amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;[http://msdn2.microsoft.com/en-us/library/ms536930.aspx msdn - onerror Event]&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;[http://developer.mozilla.org/en/docs/DOM:window.onerror Gecko DOM Reference - onerror Event]&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;[http://developer.mozilla.org/en/docs/DOM:event Gecko DOM Reference - Event object]&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;[http://en.wikipedia.org/wiki/DOM_Events Wikipedia: DOM Events]&amp;lt;/ul&amp;gt;&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>An event handler function to bind to the error event.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To keep a server-side log of JavaScript errors, you might want to:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(window).error(function(msg, url, line){
  jQuery.post("js_error_log.php", { msg: msg, url: url, line: line });
});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To hide JavaScript errors from the user, you can try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(window).error(function(){
  return true;
});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To hide the "broken image" icons for your IE users, you can try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("img").error(function(){
  $(this).hide();
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="fadeIn" scope="instance">
        <description>Only the opacity is adjusted for this animation, meaning that all of the matched elements should already have some form of height and width associated with them.</description>
        <parameters>
          <parameter name="speed" usage="required" type="String, Number">
            <description>A string representing one of the three predefined speeds ("slow", "def", or "fast") or the number of milliseconds to run the animation (e.g. 1000).  As of jQuery 1.2.6, "normal" or any other string works the same as "def" (400ms).</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the animation completes, executes once for each element animated against.
&amp;lt;pre&amp;gt;function callback() {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $(document.body).click(function () {
      $("div:hidden:first").fadeIn("slow");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;span&amp;gt;Click here...&amp;lt;/span&amp;gt;
  &amp;lt;div id="one"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="two"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="three"&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("a").click(function () {
      $("div").fadeIn(3000, function () {
        $("span").fadeIn(100);
      });
      return false;
    }); 

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    Let it be known that the party of the first part
    and the party of the second part are henceforth
    and hereto directed to assess the allegations
    for factual correctness... (&amp;lt;a href="#"&amp;gt;click!&amp;lt;/a&amp;gt;)
    &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;CENSORED!&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="fadeOut" scope="instance">
        <description>Only the opacity is adjusted for this animation, meaning that all of the matched elements should already have some form of height and width associated with them.</description>
        <parameters>
          <parameter name="speed" usage="required" type="String, Number">
            <description>A string representing one of the three predefined speeds ("slow", "normal", or "fast") or the number of milliseconds to run the animation (e.g. 1000).</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the animation completes, executes once for each element animated against.
&amp;lt;pre&amp;gt;function callback() {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Animates all paragraphs to fade out, completing the animation within 600 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").click(function () {
      $("p").fadeOut("slow");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    If you click on this paragraph
    you'll see it just fade away.
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Fades out spans in one section that you click on.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("span").click(function () {
      $(this).fadeOut(1000, function () {
        $("div").text("'" + $(this).text() + "' has faded!");
        $(this).remove();
      });
    });
    $("span").hover(function () {
      $(this).addClass("hilite");
    }, function () {
      $(this).removeClass("hilite");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;h3&amp;gt;Find the modifiers - &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/h3&amp;gt;
  &amp;lt;p&amp;gt;
    If you &amp;lt;span&amp;gt;really&amp;lt;/span&amp;gt; want to go outside
    &amp;lt;span&amp;gt;in the cold&amp;lt;/span&amp;gt; then make sure to wear
    your &amp;lt;span&amp;gt;warm&amp;lt;/span&amp;gt; jacket given to you by
    your &amp;lt;span&amp;gt;favorite&amp;lt;/span&amp;gt; teacher.
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="fadeTo" scope="instance">
        <description>Only the opacity is adjusted for this animation, meaning that all of the matched elements should already have some form of height and width associated with them.</description>
        <parameters>
          <parameter name="speed" usage="required" type="String, Number">
            <description>A string representing one of the three predefined speeds ("slow", "normal", or "fast") or the number of milliseconds to run the animation (e.g. 1000).</description>
          </parameter>
          <parameter name="opacity" usage="required" type="Number">
            <description>The opacity to fade to (a number from 0 to 1).</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the animation completes, executed once for each element animated against.
&amp;lt;pre&amp;gt;function callback() {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p:first").click(function () {
      $(this).fadeTo("slow", 0.33);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    Click this paragraph to see it fade.
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    Compare to this one that won't fade.
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Fade div to a random opacity on each click, completing the animation within 200 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").click(function () {
      $(this).fadeTo("fast", Math.random());
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;And this is the library that John built...&amp;lt;/p&amp;gt;
  &amp;lt;div id="one"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="two"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="three"&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Find the right answer!  The fade will take 250 milliseconds and change various styles when it completes.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var getPos = function (n) {
      return (Math.floor(n) * 90) + "px";
    };
    $("p").each(function (n) {
      var r = Math.floor(Math.random() * 3);
      var tmp = $(this).text();
      $(this).text($("p:eq(" + r + ")").text());
      $("p:eq(" + r + ")").text(tmp);
      $(this).css("left", getPos(n));
    });
    $("div").each(function (n) {
                  $(this).css("left", getPos(n));
                })
            .css("cursor", "pointer")
            .click(function () {
                  $(this).fadeTo(250, 0.25, function () {
                        $(this).css("cursor", "")
                               .prev().css({"font-weight": "bolder",
                                            "font-style": "italic"});
                      });
                });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Wrong&amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;Wrong&amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;Right!&amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="filter" scope="instance">
        <description>This method is used to narrow down the results of a search.

Provide a comma-separated list of expressions to apply multiple filters at once.</description>
        <parameters>
          <parameter name="expr" usage="required" type="Expression">
            <description>An expression to pass into the filter</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Change the color of all divs then put a border around only some of them.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").css("background", "#c8ebcc")
            .filter(".middle")
            .css("border-color", "red");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="middle"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="middle"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="middle"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="middle"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Selects all paragraphs and removes those without a class "selected".
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").filter(".selected")
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Selects all paragraphs and removes those that aren't of class "selected" or the first one.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").filter(".selected, :first")
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="filter" scope="instance">
        <description>The function is called with a context equal to the current element (just like &amp;lt;a href='Core/each'&amp;gt;$.each&amp;lt;/a&amp;gt;). If the function returns false, then the element is removed - anything else and the element is kept.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to pass into the filter
&amp;lt;pre&amp;gt;function callback(indexInJQueryObject) {
  var keepItBoolean = true;

  this; // dom element

  return keepItBoolean;
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Change the color of all divs then put a border to specific ones.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").css("background", "#b4b0da")
            .filter(function (index) {
                  return index == 1 || $(this).attr("id") == "fourth";
                })
            .css("border", "3px double red");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div id="first"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="second"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="third"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="fourth"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="fifth"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="sixth"&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Remove all elements that have a descendant ol element
            &lt;/p&gt;
        
            &lt;pre&gt;
             $("p").filter(function(index) {
   return $("ol", this).length == 0;
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="find" scope="instance">
        <description>All searching is done using a &amp;lt;a href='Selectors'&amp;gt;jQuery expression&amp;lt;/a&amp;gt;. The expression can be written using CSS 1-3 Selector syntax. </description>
        <parameters>
          <parameter name="expr" usage="required" type="String">
            <description>An expression to search with.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Starts with all paragraphs and searches for descendant span elements, same as $("p span")
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").find("span").css('color','red');
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;&amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt;, how are you?&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Me? I'm &amp;lt;span&amp;gt;good&amp;lt;/span&amp;gt;.&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Add spans around each word then add a hover and italicize words with the letter '''t'''.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var newText = $("p").text().split(" ").join("&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;");
    newText = "&amp;lt;span&amp;gt;" + newText + "&amp;lt;/span&amp;gt;";

    $("p").html(newText)
          .find("span")
            .hover(function () { $(this).addClass("hilite"); },
                   function () { $(this).removeClass("hilite"); })
          .end()
          .find(":contains('t')")
            .css({"font-style":"italic", "font-weight":"bolder"});

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    When the day is short
    find that which matters to you
    or stop believing
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="focus" scope="instance">
        <description>This causes all of the functions that have been bound to the focus event to be executed. Note that this does not execute the focus method of the underlying elements.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To focus on a login input box with id 'login' on page startup, try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(document).ready(function(){
  $("#login").focus();
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="focus" scope="instance">
        <description>The focus event fires when an element receives focus either via the pointing device or by tab navigation.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the focus event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {  
this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Fire focus.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("input").focus(function () {
         $(this).next("span").css('display','inline').fadeOut(1000);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;&amp;lt;input type="text" /&amp;gt; &amp;lt;span&amp;gt;focus fire&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;input type="password" /&amp;gt; &amp;lt;span&amp;gt;focus fire&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To stop people from writing in text input boxes, try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("input[@type=text]").focus(function(){
  $(this).blur();
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="get" scope="instance">
        <description>This serves as a backwards-compatible way of accessing all matched elements (other than the jQuery object itself, which is, in fact, an array of elements).

It is useful if you need to operate on the DOM elements themselves instead of using built-in jQuery functions. </description>
        <return-types>
          <return-type type="Array&lt;Element&gt;"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Selects all divs in the document and returns the DOM Elements as an Array, then uses the built-in reverse-method to reverse that array.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    function disp(divs) {
      var a = [];
      for (var i = 0; i &amp;lt; divs.length; i++) {
        a.push(divs[i].innerHTML);
      }
      $("span").text(a.join(" "));
    }
    
    disp( $("div").get().reverse() );

            &lt;/pre&gt;
        
            &lt;pre&gt;
            Reversed - &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;div&amp;gt;One&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Two&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Three&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="get" scope="instance">
        <description>This allows you to extract the actual DOM element and operate on it directly without necessarily using jQuery functionality on it. This function called as $(this).get(0) is the equivalent of using square bracket notation on the jQuery object itself like $(this)[0].</description>
        <parameters>
          <parameter name="index" usage="required" type="Number">
            <description>Access the element in the Nth position.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Element"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Gives the tag name of the element clicked on.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("*", document.body).click(function (e) {
      e.stopPropagation();
      var domEl = $(this).get(0);
      $("span:first").text("Clicked on - " + domEl.tagName);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;span&amp;gt;&amp;nbsp;&amp;lt;/span&amp;gt;
  &amp;lt;p&amp;gt;In this paragraph is an &amp;lt;span&amp;gt;important&amp;lt;/span&amp;gt; section&amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;input type="text" /&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="hasClass" scope="instance">
        <description/>
        <parameters>
          <parameter name="class" usage="required" type="String">
            <description>One CSS class name to be checked for.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Looks for the class 'selected' on the matched elements.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("div#result1").append($("p:first").hasClass("selected").toString());
$("div#result2").append($("p:last").hasClass("selected").toString());
$("div#result3").append($("p").hasClass("selected").toString());
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p class="selected"&amp;gt;Goodbye&amp;lt;/p&amp;gt;
  &amp;lt;div id="result1"&amp;gt;First paragraph has selected class: &amp;lt;/div&amp;gt;
  &amp;lt;div id="result2"&amp;gt;Last paragraph has selected class: &amp;lt;/div&amp;gt;
  &amp;lt;div id="result3"&amp;gt;Some paragraph has selected class: &amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="hasClass" scope="instance">
        <description>This is an alternative to is("." + class).</description>
        <parameters>
          <parameter name="class" usage="required" type="String">
            <description>The class to match.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Check to see if an element has a specific class, and if so, perform an action.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").click(function(){
      if ( $(this).hasClass("protected") )
        $(this).animate({ left: -10 }, 75)
               .animate({ left: 10 }, 75)
               .animate({ left: -10 }, 75)
               .animate({ left: 10 }, 75)
               .animate({ left: 0 }, 75);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;div class="protected"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;div class="protected"&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="height" scope="instance">
        <description>In jQuery 1.2, this method is able to find the height of the window and document.</description>
        <return-types>
          <return-type type="Integer"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show various heights.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    function showHeight(ele, h) {
      $("div").text("The height for the " + ele + 
                    " is " + h + "px.");
    }
    $("#getp").click(function () { 
      showHeight("paragraph", $("p").height()); 
    });
    $("#getd").click(function () { 
      showHeight("document", $(document).height()); 
    });
    $("#getw").click(function () { 
      showHeight("window", $(window).height()); 
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="getp"&amp;gt;Get Paragraph Height&amp;lt;/button&amp;gt;
  &amp;lt;button id="getd"&amp;gt;Get Document Height&amp;lt;/button&amp;gt;
  &amp;lt;button id="getw"&amp;gt;Get Window Height&amp;lt;/button&amp;gt;
  &amp;lt;div&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;
    Sample paragraph to test height
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="height" scope="instance">
        <description>If no explicit unit was specified (like 'em' or '%') then "px" is concatenated to the value.</description>
        <parameters>
          <parameter name="val" usage="required" type="String, Number">
            <description>Set the CSS 'height' property to the specified value.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To set the height of each div on click to 30px plus a color change.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").one('click', function () {
      $(this).height(30)
             .css({cursor:"auto", backgroundColor:"green"});
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="hide" scope="instance">
        <description>Same as &amp;lt;a href='Effects/hide#speedcallback'&amp;gt;hide( speed, [callback] )&amp;lt;/a&amp;gt; without animations. Doesn't change anything if the selected elements are all hidden.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Hides all paragraphs then the link on click.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").hide();
    $("a").click(function () {
      $(this).hide();
      return false;
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;a href="#"&amp;gt;Click to hide me too&amp;lt;/a&amp;gt;
  &amp;lt;p&amp;gt;Here is another paragraph&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="hide" scope="instance">
        <description>&amp;lt;p&amp;gt;The height, width, and opacity of each of the matched elements are changed dynamically according to the specified speed. As of jQuery 1.3 the padding and margin are also animated, creating a smoother effect.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="speed" usage="required" type="String, Number">
            <description>A string representing one of the three predefined speeds ("slow", "normal", or "fast") or the number of milliseconds to run the animation (e.g. 1000).</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the animation completes, executes once for each element animated against.
&amp;lt;pre&amp;gt;function callback() {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $("p").hide("slow");
    });    

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Hide 'em&amp;lt;/button&amp;gt;
  &amp;lt;p&amp;gt;Hiya&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Such interesting text, eh?&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("#hidr").click(function () {
      $("span:last-child").hide("fast", function () {
        // use callee so don't have to name the function
        $(this).prev().hide("fast", arguments.callee); 
      });
    });
    $("#showr").click(function () {
      $("span").show(2000);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="hidr"&amp;gt;Hide&amp;lt;/button&amp;gt;
  &amp;lt;button id="showr"&amp;gt;Show&amp;lt;/button&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;span&amp;gt;Once&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;upon&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;a&amp;lt;/span&amp;gt; 
    &amp;lt;span&amp;gt;time&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;there&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;were&amp;lt;/span&amp;gt; 
    &amp;lt;span&amp;gt;three&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;programmers...&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    for (var i = 0; i &amp;lt; 5; i++) {
      $("&amp;lt;div&amp;gt;").appendTo(document.body);
    }
    $("div").click(function () {
      $(this).hide(2000, function () {
        $(this).remove();
      });
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="hover" scope="instance">
        <description>Whenever the mouse cursor is moved over a matched element, the first specified function is fired. Whenever the mouse moves off of the element, the second specified function fires. Additionally, checks are in place to see if the mouse is still within the specified element itself (for example, an image inside of a div), and if it is, it will continue to 'hover', and not move out (a common error in using a mouseout event handler).</description>
        <parameters>
          <parameter name="over" usage="required" type="Function">
            <description>The function to fire when the mouse is moved over a matched element.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
          <parameter name="out" usage="required" type="Function">
            <description>The function to fire when the mouse is moved off of a matched element.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To add a special style to list items that are being hovered over, try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("li").hover(
      function () {
        $(this).append($("&amp;lt;span&amp;gt; ***&amp;lt;/span&amp;gt;"));
      }, 
      function () {
        $(this).find("span:last").remove();
      }
    );


   
  //Another example for mouse over effect on hyperlinks on page
   $("a").hover(function(){$(this).fadeOut(100);$(this).fadeIn(500);});
  


            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Milk&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Bread&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href='#'&amp;gt;Chips&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href='#'&amp;gt;Socks&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To add a special style to table cells that are being hovered over, try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("td").hover(
  function () {
    $(this).addClass("hover");
  },
  function () {
    $(this).removeClass("hover");
  }
);
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To unbind the above example use:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("td").unbind('mouseenter mouseleave');
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="html" scope="instance">
        <description/>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Click a paragraph to convert it from html to text.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").click(function () {
      var htmlStr = $(this).html();
      $(this).text(htmlStr);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    &amp;lt;b&amp;gt;Click&amp;lt;/b&amp;gt; to change the &amp;lt;span id="tag"&amp;gt;html&amp;lt;/span&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    to a &amp;lt;span id="text"&amp;gt;text&amp;lt;/span&amp;gt; node.
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    This &amp;lt;button name="nada"&amp;gt;button&amp;lt;/button&amp;gt; does nothing.
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="html" scope="instance">
        <description/>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Click a paragraph to convert it from html to text.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").click(function () {
      var htmlStr = $(this).html();
      $(this).text(htmlStr);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    &amp;lt;b&amp;gt;Click&amp;lt;/b&amp;gt; to change the &amp;lt;span id="tag"&amp;gt;html&amp;lt;/span&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    to a &amp;lt;span id="text"&amp;gt;text&amp;lt;/span&amp;gt; node.
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    This &amp;lt;button name="nada"&amp;gt;button&amp;lt;/button&amp;gt; does nothing.
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="html" scope="instance">
        <description/>
        <parameters>
          <parameter name="val" usage="required" type="String">
            <description>Set the html contents to the specified value.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Add some html to each div.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("div").html("&amp;lt;span class='red'&amp;gt;Hello &amp;lt;b&amp;gt;Again&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Add some html to each div then immediately do further manipulations to the inserted html.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").html("&amp;lt;b&amp;gt;Wow!&amp;lt;/b&amp;gt; Such excitement...");
    $("div b").append(document.createTextNode("!!!"))
              .css("color", "red");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="html" scope="instance">
        <description/>
        <parameters>
          <parameter name="val" usage="required" type="String">
            <description>Set the html contents to the specified value.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Add some html to each div.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("div").html("&amp;lt;span class='red'&amp;gt;Hello &amp;lt;b&amp;gt;Again&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Add some html to each div then immediately do further manipulations to the inserted html.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").html("&amp;lt;b&amp;gt;Wow!&amp;lt;/b&amp;gt; Such excitement...");
    $("div b").append(document.createTextNode("!!!"))
              .css("color", "red");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="index" scope="instance">
        <description>Returns -1 if the object wasn't found.</description>
        <parameters>
          <parameter name="subject" usage="required" type="Element,jQuery">
            <description>Object to search for.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            On click, returns the index (based zero) of that div in the page.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").click(function () {
      // this is the dom element clicked
      var index = $("div").index(this);
      $("span").text("That was div index #" + index);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;span&amp;gt;Click a div!&amp;lt;/span&amp;gt;
  &amp;lt;div&amp;gt;First div&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Second div&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Third div&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Returns the index for the element with ID foobar.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("*").index( $('#foobar')[0] )
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div id="foobar"&amp;gt;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;span id="foo"&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Returns the index for the element with ID foo within another element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("*").index( $('#foo') )
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div id="foobar"&amp;gt;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;span id="foo"&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Returns the index for the element clicked within a collection.
            &lt;/p&gt;
        
            &lt;pre&gt;
            var mainNavLinks = $('ul#mainNav li a');
mainNavLinks.click(function(){alert(mainNavLinks.index(this));});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Returns -1, as there is no element with ID bar.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("*").index( $('#bar')[0] )
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div id="foobar"&amp;gt;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;span id="foo"&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="innerHeight" scope="instance">
        <description>This method works for both visible and hidden elements.</description>
        <return-types>
          <return-type type="Integer"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get innerHeight
            &lt;/p&gt;
        
            &lt;pre&gt;
            var p = $("p:first");
$("p:last").text( "innerHeight:" + p.innerHeight() );

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="innerWidth" scope="instance">
        <description> This method works for both visible and hidden elements.</description>
        <return-types>
          <return-type type="Integer"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get innerWidth
            &lt;/p&gt;
        
            &lt;pre&gt;
            var p = $("p:first");
$("p:last").text( "innerWidth:" + p.innerWidth() );

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="insertAfter" scope="instance">
        <description>This operation is, essentially, the reverse of doing a regular $(A).after(B), in that instead of inserting B after A, you're inserting A after B.</description>
        <parameters>
          <parameter name="content" usage="required" type="String">
            <description>Content after which the selected element(s) is inserted.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Inserts all paragraphs after an element with id of "foo". Same as $("#foo").after("p")
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").insertAfter("#foo"); // check after() examples
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt; is what I said... &amp;lt;/p&amp;gt;&amp;lt;div id="foo"&amp;gt;FOO!&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="insertBefore" scope="instance">
        <description>This operation is, essentially, the reverse of doing a regular $(A).before(B), in that instead of inserting B before A, you're inserting A before B.</description>
        <parameters>
          <parameter name="content" usage="required" type="String">
            <description>Content after which the selected element(s) is inserted.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Inserts all paragraphs before an element with id of "foo". Same as $("#foo").before("p")
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").insertBefore("#foo"); // check before() examples
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div id="foo"&amp;gt;FOO!&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;I would like to say: &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="is" scope="instance">
        <description>&amp;lt;p&amp;gt;If no element fits, or the expression is not valid, then the response will be 'false'.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;'''Note''': As of jQuery 1.3 all expressions are supported. Previously complex expressions, such as those containing hierarchy selectors (such as +, ~, and &amp;gt;), always returned 'true'.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;a href='Traversing/filter'&amp;gt;filter&amp;lt;/a&amp;gt; is used internally, therefore all rules that apply there apply here, as well.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="expr" usage="required" type="String">
            <description>The expression with which to filter</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Shows a few ways is() can be used inside an event handler.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").one('click', function () {
      if ($(this).is(":first-child")) {
        $("p").text("It's the first div.");
      } else if ($(this).is(".blue,.red")) {
        $("p").text("It's a blue or red div.");
      } else if ($(this).is(":contains('Peter')")) {
        $("p").text("It's Peter!");
      } else {
        $("p").html("It's nothing &amp;lt;em&amp;gt;special&amp;lt;/em&amp;gt;.");
      }
      $("p").hide().slideDown("slow");
      $(this).css({"border-style": "inset", cursor:"default"});
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="blue"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="red"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;span&amp;gt;Peter&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="blue"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;&amp;nbsp;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Returns true, because the parent of the input is a form element
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var isFormParent = $("input[@type='checkbox']").parent().is("form")
    $("div").text("isFormParent = " + isFormParent);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;form&amp;gt;&amp;lt;input type="checkbox" /&amp;gt;&amp;lt;/form&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Returns false, because the parent of the input is a p element
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var isFormParent = $("input[@type='checkbox']").parent().is("form")
    $("div").text("isFormParent = " + isFormParent);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;form&amp;gt;&amp;lt;p&amp;gt;&amp;lt;input type="checkbox" /&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/form&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.ajax" scope="static">
        <description>This is jQuery's low-level AJAX implementation. See $.get, $.post etc. for higher-level abstractions that are often easier to understand and use, but don't offer as much functionality (such as error callbacks).

$.ajax() returns the XMLHttpRequest that it creates. In most cases you won't need that object to manipulate directly, but it is available if you need to abort the request manually.

$.ajax() takes one argument, an object of key/value pairs, that are used to initialize and handle the request. See below for a full list of the key/values that can be used.

'''Note:''' If you specify the dataType option described below, make sure
the server sends the correct MIME type in the response (eg. xml as "text/xml").
Sending the wrong MIME type can lead to unexpected problems in your script.
See &amp;lt;a href='Specifying_the_Data_Type_for_AJAX_Requests'&amp;gt;Specifying the Data Type for AJAX Requests&amp;lt;/a&amp;gt; for more information.

'''Note:''' All remote (not on the same domain) POST requests are converted to GET when 'script' is the dataType (because it loads script using a DOM script tag).

As of jQuery 1.2, you can load JSON data located on another domain if you specify a [http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/ JSONP] callback, which can be done like so: "myurl?callback=?". jQuery automatically replaces the ? with the correct method name to call, calling your specified callback. Or, if you set the dataType to "jsonp" a callback will be automatically added to your Ajax request.</description>
        <parameters>
          <parameter name="options" usage="required" type="Options">
            <description>A set of key/value pairs that configure the Ajax request. All options are optional. A default can be set for any option with &amp;lt;a href='Ajax/jQuery.ajaxSetup'&amp;gt;$.ajaxSetup&amp;lt;/a&amp;gt;().</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="XMLHttpRequest"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Load and execute a JavaScript file.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.ajax({
   type: "GET",
   url: "test.js",
   dataType: "script"
 });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Save some data to the server and notify the user once its complete.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.ajax({
   type: "POST",
   url: "some.php",
   data: "name=John&amp;location=Boston",
   success: function(msg){
     alert( "Data Saved: " + msg );
   }
 });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Retrieve the latest version of an HTML page.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.ajax({
  url: "test.html",
  cache: false,
  success: function(html){
    $("#results").append(html);
  }
});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Loads data synchronously. Blocks the browser while the requests is active.
It is better to block user interaction by other means when synchronization is
necessary.
            &lt;/p&gt;
        
            &lt;pre&gt;
             var html = $.ajax({
  url: "some.php",
  async: false
 }).responseText;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Sends an xml document as data to the server. By setting the processData
option to false, the automatic conversion of data to strings is prevented.
            &lt;/p&gt;
        
            &lt;pre&gt;
             var xmlDocument = [create xml document];
 $.ajax({
   url: "page.php",
   processData: false,
   data: xmlDocument,
   success: handleResponse
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.ajaxSetup" scope="static">
        <description>See &amp;lt;a href='Ajax/jQuery.ajax'&amp;gt;$.ajax&amp;lt;/a&amp;gt; for a description of all available options.</description>
        <parameters>
          <parameter name="options" usage="required" type="Options">
            <description>A set of key/value pairs that configure the default Ajax request. All options are optional.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type=""/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Sets the defaults for AJAX requests to the url "/xmlhttp/", disables global handlers and uses POST instead of GET. The following AJAX requests then sends some data without having to set anything else.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.ajaxSetup({
   url: "/xmlhttp/",
   global: false,
   type: "POST"
 });
 $.ajax({ data: myData });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.data" scope="static">
        <description>Typically this function will only be used internally.  It is called automatically when necessary when using the other data() functionality.</description>
        <parameters>
          <parameter name="elem" usage="required" type="Element">
            <description>DOM element of interest.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get the store id of an element.  It is assigned on the data() function call if one hasn't been assigned yet.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $(document.body).click(function(e) {
      var id = jQuery.data(e.target);
      $("span").text(id);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;A div&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Another&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;The id of this div is &amp;lt;span&amp;gt;?&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.data" scope="static">
        <description/>
        <parameters>
          <parameter name="elem" usage="required" type="Element">
            <description>DOM element of interest.</description>
          </parameter>
          <parameter name="name" usage="required" type="String">
            <description>Name of the data stored.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Any"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get the data named "blah" stored at for an element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function(e) {
      var adiv = $("div").get(0);
      var value;

      switch ($("button").index(this)) {
        case 0 :
          value = jQuery.data(adiv, "blah");
          break;
        case 1 :
          jQuery.data(adiv, "blah", "hello");
          value = "Stored!";
          break;
        case 2 :
          jQuery.data(adiv, "blah", 86);
          value = "Stored!";
          break;
        case 3 :
          jQuery.removeData(adiv);
          value = "Removed!";
          break;
      }

      $("span").text("" + value);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;A div&amp;lt;/div&amp;gt;
  &amp;lt;button&amp;gt;Get "blah" from the div&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;Set "blah" to "hello"&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;Set "blah" to 86&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;Remove "blah" from the div&amp;lt;/button&amp;gt;
  &amp;lt;p&amp;gt;The "blah" value of this div is &amp;lt;span&amp;gt;?&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.data" scope="static">
        <description>This function can be useful for attaching data to elements without having to create a new expando.  It also isn't limited to a string.  The value can be any format.

To avoid conflicts in plugins, it is usually effective to store one object using the plugin name and put all the necessary information in that object.

&amp;lt;code&amp;gt;
  var obj = jQuery.data($("#target").get(0), "pluginname", {});
  obj[...] = ...
&amp;lt;/code&amp;gt;</description>
        <parameters>
          <parameter name="elem" usage="required" type="Element">
            <description>DOM element of interest.</description>
          </parameter>
          <parameter name="name" usage="required" type="String">
            <description>Name of the data to store.</description>
          </parameter>
          <parameter name="value" usage="required" type="Any">
            <description>Value to be stored.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Any"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Store then retrieve a value from the div element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var adiv = $("div").get(0);
    jQuery.data(adiv, "test", { first: 16, last: "pizza!" });
    $("span:first").text(jQuery.data(adiv, "test").first);
    $("span:last").text(jQuery.data(adiv, "test").last);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;
    The values stored were 
    &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
    and
    &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.each" scope="static">
        <description>This function is not the same as &amp;lt;a href='Core/each'&amp;gt;$().each()&amp;lt;/a&amp;gt; - which is used to iterate, exclusively, over a jQuery object. This function can be used to iterate over anything.

The callback has two arguments:the key (objects) or index (arrays) as the first, and the value as the second.

If you wish to break the each() loop at a particular iteration you can do so by making your function return false. Returning non-false is the same as a &amp;lt;code&amp;gt;continue&amp;lt;/code&amp;gt; statement in a for loop, it will skip immediately to the next iteration.</description>
        <parameters>
          <parameter name="object" usage="required" type="Object">
            <description>The object or array to iterate over.</description>
          </parameter>
          <parameter name="callback" usage="required" type="Function">
            <description>The function that will be executed on every object.
&amp;lt;pre&amp;gt;function callback(indexInArray, valueOfElement) {
  var booleanKeepGoing;

  this; // == valueOfElement (casted to Object)

  return booleanKeepGoing; // optional, unless false 
                           // and want to stop looping
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Iterates through the array displaying each number as both a word and numeral
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var arr = [ "one", "two", "three", "four", "five" ];
    var obj = { one:1, two:2, three:3, four:4, five:5 };

    jQuery.each(arr, function() {
      $("#" + this).text("My id is " + this + ".");
      return (this != "four"); // will stop running to skip "five"
    });

    jQuery.each(obj, function(i, val) {
      $("#" + i).append(document.createTextNode(" - " + val));
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div id="one"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="two"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="three"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="four"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="five"&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Iterates over items in an array, accessing both the current item and its index.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.each( [0,1,2], function(i, n){
   alert( "Item #" + i + ": " + n );
 });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Iterates over the properties in an object, accessing both the current item and its key.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.each( { name: "John", lang: "JS" }, function(i, n){
   alert( "Name: " + i + ", Value: " + n );
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.extend" scope="static">
        <description>Can be used to add functions into the jQuery namespace. See &amp;lt;a href='Core/jQuery.fn.extend'&amp;gt;jQuery.fn.extend&amp;lt;/a&amp;gt; for more information on using this method to add &amp;lt;a href='Plugins/Authoring'&amp;gt;Plugins&amp;lt;/a&amp;gt;.</description>
        <parameters>
          <parameter name="object" usage="required" type="Object">
            <description>The object that will be merged into the jQuery object.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Adds two functions into the jQuery namespace.
            &lt;/p&gt;
        
            &lt;pre&gt;
            jQuery.extend({
  min: function(a, b) { return a &amp;lt; b ? a : b; },
  max: function(a, b) { return a &amp;gt; b ? a : b; }
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.extend" scope="static">
        <description>If no target is specified, the JQuery namespace itself is extended.  This can be useful for plugin authors wishing to add new methods to JQuery.

If a boolean true is specified as the first argument, JQuery performs a deep copy, recursively copying any objects it finds.  Otherwise, the copy will share structure with the original object(s).

Undefined properties are not copied.  However, properties inherited from the object's prototype ''will'' be copied over.</description>
        <parameters>
          <parameter name="deep" usage="optional" type="Boolean">
            <description>If set, the merge becomes recursive (i.e. deep copy).</description>
          </parameter>
          <parameter name="target" usage="required" type="Object">
            <description>The object to extend.</description>
          </parameter>
          <parameter name="object1" usage="required" type="Object">
            <description>The object that will be merged into the first.</description>
          </parameter>
          <parameter name="objectN" usage="optional" type="Object">
            <description>More objects to merge into the first.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Merge settings and options, modifying settings.
            &lt;/p&gt;
        
            &lt;pre&gt;
            var settings = { validate: false, limit: 5, name: "foo" };
var options = { validate: true, name: "bar" };
jQuery.extend(settings, options);
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Merge defaults and options, without modifying the defaults.
            &lt;/p&gt;
        
            &lt;pre&gt;
            var empty = {}
var defaults = { validate: false, limit: 5, name: "foo" };
var options = { validate: true, name: "bar" };
var settings = $.extend(empty, defaults, options);
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.fn.extend" scope="static">
        <description>Can be used to add functions into the to add &amp;lt;a href='Plugins/Authoring'&amp;gt;plugin methods (plugins)&amp;lt;/a&amp;gt;. </description>
        <parameters>
          <parameter name="object" usage="required" type="Object">
            <description>The object that will be merged into the jQuery object.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Adds two plugin methods.
            &lt;/p&gt;
        
            &lt;pre&gt;
            jQuery.fn.extend({
  check: function() {
    return this.each(function() { this.checked = true; });
  },
  uncheck: function() {
    return this.each(function() { this.checked = false; });
  }
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.get" scope="static">
        <description>This is an easy way to send a simple GET request to a server without having to use the more complex $.ajax function. It allows a single callback function to be specified that will be executed when the request is complete (and only if the response has a successful response code). If you need to have both error and success callbacks, you may want to use $.ajax.</description>
        <parameters>
          <parameter name="url" usage="required" type="String">
            <description>The URL of the page to load.</description>
          </parameter>
          <parameter name="data" usage="optional" type="Map">
            <description>Key/value pairs that will be sent to the server.</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the data is loaded successfully.
&amp;lt;pre&amp;gt;function (data, textStatus) {
  // data could be xmlDoc, jsonObj, html, text, etc...
  this; // the options for this ajax request
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
          <parameter name="type" usage="optional" type="String">
            <description>Type of data to be returned to callback function:  "xml", "html", "script", "json", "jsonp", or "text".</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="XMLHttpRequest"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Request the test.php page, but ignore the return results.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.get("test.php");
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Request the test.php page and send some additional data along (while still ignoring the return results).
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.get("test.php", { name: "John", time: "2pm" } );
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            pass arrays of data to the server (while still ignoring the return results).
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.get("test.php", { 'choices[]': ["Jon", "Susan"]} );
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Alert out the results from requesting test.php (HTML or XML, depending on what was returned).
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.get("test.php", function(data){
   alert("Data Loaded: " + data);
 });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Alert out the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.get("test.cgi", { name: "John", time: "2pm" },
   function(data){
     alert("Data Loaded: " + data);
   });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.getJSON" scope="static">
        <description>As of jQuery 1.2, you can load JSON data located on another domain if you specify a [http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/ JSONP] callback, which can be done like so: "myurl?callback=?". jQuery automatically replaces the ? with the correct method name to call, calling your specified callback.


Note: Keep in mind, that lines after this function will be executed before callback.</description>
        <parameters>
          <parameter name="url" usage="required" type="String">
            <description>The URL of the page to load.</description>
          </parameter>
          <parameter name="data" usage="optional" type="Map">
            <description>Key/value pairs that will be sent to the server.</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the data is loaded successfully.
&amp;lt;pre&amp;gt;function (data, textStatus) {
  // data will be a jsonObj
  this; // the options for this ajax request
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="XMLHttpRequest"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Loads the four most recent cat pictures from the Flickr JSONP API.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.getJSON("http://api.flickr.com/services/feeds/photos_public.gne?tags=cat&amp;tagmode=any&amp;format=json&amp;jsoncallback=?",
        function(data){
          $.each(data.items, function(i,item){
            $("&amp;lt;img/&amp;gt;").attr("src", item.media.m).appendTo("#images");
            if ( i == 4 ) return false;
          });
        });
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div id="images"&amp;gt;
  &amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Load the JSON data from test.js and access a name from the returned JSON data.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.getJSON("test.js", function(json){
   alert("JSON Data: " + json.users[3].name);
 });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.getJSON("test.js", { name: "John", time: "2pm" }, function(json){
   alert("JSON Data: " + json.users[3].name);
 });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            List the result of a consultation of pages.php in HTML as an array. By Manuel Gonzalez.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
var id=$("#id").attr("value");
  $.getJSON("pages.php",{id:id},dates);
function dates(datos)
{
    
 $("#list").html("Name:"+datos[1].name+"&amp;lt;br&amp;gt;"+"Last Name:"+datos[1].lastname+"&amp;lt;br&amp;gt;"+"Address:"+datos[1].address);
}

            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.getScript" scope="static">
        <description>Before jQuery 1.2, getScript was only able to load scripts from the same domain as the original page. As of 1.2, you can now load JavaScript files from any domain.

Warning: Safari 2 and older is unable to evaluate scripts in a global context synchronously. If you load functions via getScript, make sure to call them after a delay.</description>
        <parameters>
          <parameter name="url" usage="required" type="String">
            <description>The URL of the page to load.</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the data is loaded successfully.
&amp;lt;pre&amp;gt;function (data, textStatus) {
  // data should be javascript
  this; // the options for this ajax request
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="XMLHttpRequest"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            We load the new [http://jquery.com/plugins/project/color official jQuery Color Animation plugin] dynamically and bind some color animations to occur once the new functionality is loaded.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.getScript("http://dev.jquery.com/view/trunk/plugins/color/jquery.color.js", function(){
  $("#go").click(function(){
    $(".block").animate( { backgroundColor: 'pink' }, 1000)
      .animate( { backgroundColor: 'blue' }, 1000);
  });
});
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="go"&amp;gt;&amp;raquo; Run&amp;lt;/button&amp;gt;
&amp;lt;div class="block"&amp;gt;&amp;lt;/div&amp;gt;

            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Load the test.js JavaScript file and execute it.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.getScript("test.js");
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Load the test.js JavaScript file and execute it, displaying an alert message when the execution is complete.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.getScript("test.js", function(){
   alert("Script loaded and executed.");
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.grep" scope="static">
        <description>The filter function will be passed two arguments: The current array item and its index. The filter function must return 'true' to keep the item in the array.</description>
        <parameters>
          <parameter name="array" usage="required" type="Array">
            <description>The Array to find items in.</description>
          </parameter>
          <parameter name="callback" usage="required" type="Function">
            <description>The function to process each item against.  The first argument to the function is the list item, and the second argument is the list index.  The function should return a Boolean value.  The "lambda-form" function feature was removed in jQuery 1.2.3 to help compatibility with other frameworks.
&amp;lt;pre&amp;gt;function callback(elementOfArray, indexInArray) {
  var shouldKeepIt;

  this; // == window

  return shouldKeepIt;
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
          <parameter name="invert" usage="optional" type="Boolean">
            <description>If "invert" is false, or not provided, then the function returns an array consisting of all elements for which "callback" returns true.  If "invert" is true, then the function returns an array consisting of all elements for which "callback" returns false.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Filters the original array of numbers leaving that are not 5 and have an index greater than 3.  Then it removes all 9s while inverting it.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var arr = [ 1, 9, 3, 8, 6, 1, 5, 9, 4, 7, 3, 8, 6, 9, 1 ];
    $("div").text(arr.join(", "));

    arr = jQuery.grep(arr, function(n, i){
      return (n != 5 &amp;&amp; i &amp;gt; 4);
    });
    $("p").text(arr.join(", "));

    arr = jQuery.grep(arr, function (a) { return a != 9; });
    $("span").text(arr.join(", "));

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
  
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Filter an array of numbers to include only numbers bigger then zero.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.grep( [0,1,2], function(n,i){
   return n &amp;gt; 0;
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.inArray" scope="static">
        <description/>
        <parameters>
          <parameter name="value" usage="required" type="Any">
            <description>Value to see if it exists in the array.</description>
          </parameter>
          <parameter name="array" usage="required" type="Array">
            <description>Array to look through for the value.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var arr = [ 4, "Pete", 8, "John" ];

    $("span:eq(0)").text(jQuery.inArray("John", arr));
    $("span:eq(1)").text(jQuery.inArray(4, arr));
    $("span:eq(2)").text(jQuery.inArray("David", arr));

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;"John" found at &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;4 found at &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;"David" found at &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.isArray" scope="static">
        <description/>
        <parameters>
          <parameter name="obj" usage="required" type="Object">
            <description>Object to test whether or not it is an array.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="boolean"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Finds out if the parameter is an array.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("b").append( "" + $.isArray([]) );
            &lt;/pre&gt;
        
            &lt;pre&gt;
            Is [] an Array? &amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.isFunction" scope="static">
        <description>&amp;lt;p&amp;gt;'''Note:''' As of jQuery 1.3 the range of functions supported by isFunction is much smaller (for example, native functions provided by the browser, like 'alert', and DOM methods like 'getAttribute' are no longer guaranteed to be detected as functions).&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="obj" usage="required" type="Object">
            <description>Object to test whether or not it is a function.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="boolean"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Test a few parameter examples.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    function stub() {
    }
    var objs = [
          function () {},
          { x:15, y:20 },
          null,
          stub,
          "function"
        ];

    jQuery.each(objs, function (i) {
      var isFunc = jQuery.isFunction(objs[i]);
      $("span").eq(i).text(isFunc);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            
  &amp;lt;div&amp;gt;jQuery.isFunction(objs[0]) = &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;jQuery.isFunction(objs[1]) = &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;jQuery.isFunction(objs[2]) = &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;jQuery.isFunction(objs[3]) = &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;jQuery.isFunction(objs[4]) = &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Finds out if the parameter is a funcion.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.isFunction(function(){});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.makeArray" scope="static">
        <description>Typically it will be unnecessary to use this function if you are using jQuery which uses this function internally.</description>
        <parameters>
          <parameter name="obj" usage="required" type="Object">
            <description>Anything to turn in to an actual Array.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Turn a collection of HTMLElements into an Array of them.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var arr = jQuery.makeArray(document.getElementsByTagName("div"));
    arr.reverse(); // use an Array method on list of dom elements
    $(arr).appendTo(document.body);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;First&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Second&amp;lt;/div&amp;gt;  
  &amp;lt;div&amp;gt;Third&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Fourth&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.map" scope="static">
        <description>The translation function that is provided to this method is called for each item in the array and is passed two arguments: The index within the array, and the item to be translated.

The function can then return the translated value, 'null' (to remove the item), or an array of values - which will be flattened into the full array. 

Map can also iterate through objects as well.</description>
        <parameters>
          <parameter name="array" usage="required" type="Array">
            <description>The Array to translate.</description>
          </parameter>
          <parameter name="callback" usage="required" type="Function">
            <description>The function to process each item against.  The argument to the function is the list item. The function can return any value.  The "lambda-form" function represented as a string no longer works.  It was removed in version 1.2.3 to increase compatibility with Adobe AIR.   
&amp;lt;pre&amp;gt;function callback(indexInArray, elementOfArray) {
  var replacementValue;

  this; // unmapped

  return replacementValue;
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            A couple examples of using .map()
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var arr = [ "a", "b", "c", "d", "e" ]
    $("div").text(arr.join(", "));

    arr = jQuery.map(arr, function(n, i){
      return (n.toUpperCase() + i);
    });
    $("p").text(arr.join(", "));

    arr = jQuery.map(arr, function (a) { return a + a; });
    $("span").text(arr.join(", "));

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
  
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Maps the original array to a new one and adds 4 to each value.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.map( [0,1,2], function(n){
   return n + 4;
 });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Maps the original array to a new one and adds 1 to each value if it is bigger then zero, otherwise it's removed.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.map( [0,1,2], function(n){
   return n &amp;gt; 0 ? n + 1 : null;
 });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Maps the original array to a new one, each element is added with it's original value and the value plus one.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.map( [0,1,2], function(n){
   return [ n, n + 1 ];
 });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Maps the original array to a new one, each element is squared.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.map( [0,1,2,3], function (a) { return a * a; } );
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.merge" scope="static">
        <description>The result is the altered first argument with the elements from the second array added. To remove duplicate elements from the resulting array, use $.unique().</description>
        <parameters>
          <parameter name="first" usage="required" type="Array">
            <description>The first array to merge, the elements of second added.</description>
          </parameter>
          <parameter name="second" usage="required" type="Array">
            <description>The second array to merge into the first, unaltered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Merges two arrays, altering the first argument.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.merge( [0,1,2], [2,3,4] )
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Merges two arrays, altering the first argument.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.merge( [3,2,1], [4,3,2] )
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.noConflict" scope="static">
        <description>This helps to make sure that jQuery doesn't conflict with the $ object of other libraries.

By using this function, you will only be able to access jQuery using the 'jQuery' variable. For example, where you used to do $("div p"), you now must do jQuery("div p").

'''NOTE:''' This function must be called after including the jQuery javascript file, but '''before''' including any other conflicting library, and also before actually that other conflicting library gets used, in case jQuery is included last.  noConflict can be called at the end of the jQuery.js file to globally disable the $() jQuery alias.  jQuery.noConflict returns a reference to jQuery, so it can be used to override the $() alias of the jQuery object.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Maps the original object that was referenced by $ back to $.
            &lt;/p&gt;
        
            &lt;pre&gt;
            jQuery.noConflict();
// Do something with jQuery
jQuery("div p").hide();
// Do something with another library's $()
$("content").style.display = 'none';
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Reverts the $ alias and then creates and executes a function to provide the $ as a jQuery alias inside the functions scope. Inside the function the original $ object is not available. This works well for most plugins that don't rely on any other library.  

            &lt;/p&gt;
        
            &lt;pre&gt;
            jQuery.noConflict();
(function($) { 
  $(function() {
    // more code using $ as alias to jQuery
  });
})(jQuery);
// other code using $ as an alias to the other library
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            You can chain the jQuery.noConflict() with the shorthand ready for a compact code.

            &lt;/p&gt;
        
            &lt;pre&gt;
            jQuery.noConflict()(function(){
    // code using jQuery
}); 
// other code using $ as an alias to the other library
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Creates a different alias instead of jQuery to use in the rest of the script.
            &lt;/p&gt;
        
            &lt;pre&gt;
            var j = jQuery.noConflict();
// Do something with jQuery
j("div p").hide();
// Do something with another library's $()
$("content").style.display = 'none';
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.noConflict" scope="static">
        <description>This is a more-extreme version of the simple &amp;lt;a href='Core/jQuery.noConflict'&amp;gt;noConflict&amp;lt;/a&amp;gt; method, as this one will completely undo what jQuery has introduced. This is to be used in an extreme case where you'd like to embed jQuery into a high-conflict environment. '''NOTE:''' It's very likely that plugins won't work after this particular method has been called.</description>
        <parameters>
          <parameter name="extreme" usage="required" type="Boolean">
            <description>Set to true to enable the extreme rollback of jQuery and its variables.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Completely move jQuery to a new namespace in another object.
            &lt;/p&gt;
        
            &lt;pre&gt;
            var dom = {};
dom.query = jQuery.noConflict(true);
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.param" scope="static">
        <description/>
        <parameters>
          <parameter name="obj" usage="required" type="Array&lt;Elements&gt;, jQuery, Object">
            <description>An Array or jQuery object is serialized by name/value pairs.  An object by key/value pairs.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Serialize a key/value object.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var params = { width:1680, height:1050 };
    var str = jQuery.param(params);
    $("#results").text(str);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div id="results"&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.post" scope="static">
        <description>This is an easy way to send a simple POST request to a server without having to use the more complex $.ajax function. It allows a single callback function to be specified that will be executed when the request is complete (and only if the response has a successful response code).
The returned data format can be specified by the fourth parameter.
If you need to have both error and success callbacks, you may want to use $.ajax. $.post is a (simplified) wrapper function for $.ajax.</description>
        <parameters>
          <parameter name="url" usage="required" type="String">
            <description>The URL of the page to load.</description>
          </parameter>
          <parameter name="data" usage="optional" type="Map">
            <description>Key/value pairs that will be sent to the server.</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the data is loaded successfully.
&amp;lt;pre&amp;gt;function (data, textStatus) {
  // data could be xmlDoc, jsonObj, html, text, etc...
  this; // the options for this ajax request
  // textStatus can be one of:
  //   "timeout"
  //   "error"
  //   "notmodified"
  //   "success"
  //   "parsererror" 
  // NOTE: Apparently, only "success" is returned when you make
  // an Ajax call in this way. Other errors silently fail.
  // See above note about using $.ajax.
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
          <parameter name="type" usage="optional" type="String">
            <description>Type of data to be returned to callback function:  "xml", "html", "script", "json", "jsonp", or "text".
&amp;lt;pre&amp;gt;$.postJSON = function(url, data, callback) {
    $.post(url, data, callback, "json");
};
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="XMLHttpRequest"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Request the test.php page, but ignore the return results.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.post("test.php");
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Request the test.php page and send some additional data along (while still ignoring the return results).
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.post("test.php", { name: "John", time: "2pm" } );
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            pass arrays of data to the server (while still ignoring the return results).
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.post("test.php", { 'choices[]': ["Jon", "Susan"] });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Alert out the results from requesting test.php (HTML or XML, depending on what was returned).
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.post("test.php", function(data){
   alert("Data Loaded: " + data);
 });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Alert out the results from requesting test.php with an additional payload of data (HTML or XML, depending on what was returned).
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.post("test.php", { name: "John", time: "2pm" },
   function(data){
     alert("Data Loaded: " + data);
   });
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Gets the test.php page content, store it in a XMLHttpResponse object and applies the process() JavaScript function.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.post("test.php", { name: "John", time: "2pm" },
   function(data){
     process(data);
   }, "xml");
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Gets the test.php page contents which has been returned in json format (&amp;lt;?php echo json_encode(array("name"=&amp;gt;"John","time"=&amp;gt;"2pm")); ?&amp;gt;)

            &lt;/p&gt;
        
            &lt;pre&gt;
             $.post("test.php", { func: "getNameAndTime" },
   function(data){
     alert(data.name); // John
     console.log(data.time); //  2pm
   }, "json");
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.removeData" scope="static">
        <description>This is the complement function to jQuery.data(elem) which is called as necessary by jQuery.data(elem, name, value).</description>
        <parameters>
          <parameter name="elem" usage="required" type="Element">
            <description>Element to delete the data store from.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type=""/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Set a data store then remove it.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var adiv = $("div").get(0);

    $("span:eq(0)").text("" + jQuery.data(adiv, "test1"));
    jQuery.data(adiv, "test1", "VALUE-1");
    jQuery.data(adiv, "test2", "VALUE-2");
    $("span:eq(1)").text("" + jQuery.data(adiv, "test1"));
    jQuery.removeData(adiv);
    $("span:eq(2)").text("" + jQuery.data(adiv, "test1"));
    $("span:eq(3)").text("" + jQuery.data(adiv, "test2"));

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;value1 before creation: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;value1 after creation: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;value1 after removal: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;value2 after removal: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.removeData" scope="static">
        <description>This is the complement function to jQuery.data(elem, name, value).</description>
        <parameters>
          <parameter name="elem" usage="required" type="Element">
            <description>Element to delete the named data store property from.</description>
          </parameter>
          <parameter name="name" usage="required" type="String">
            <description>The name of the data store property to remove.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type=""/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Set a data store for 2 names then remove one of them.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var adiv = $("div").get(0);

    $("span:eq(0)").text("" + jQuery.data(adiv, "test1"));
    jQuery.data(adiv, "test1", "VALUE-1");
    jQuery.data(adiv, "test2", "VALUE-2");
    $("span:eq(1)").text("" + jQuery.data(adiv, "test1"));
    jQuery.removeData(adiv, "test1");
    $("span:eq(2)").text("" + jQuery.data(adiv, "test1"));
    $("span:eq(3)").text("" + jQuery.data(adiv, "test2"));

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;value1 before creation: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;value1 after creation: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;value1 after removal: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;value2 after removal: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.trim" scope="static">
        <description>Uses a regular expression to remove whitespace from the given string.</description>
        <parameters>
          <parameter name="str" usage="required" type="String">
            <description>The string to trim.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Removes the two whitespaces at the start and at the end of the string.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      var str = "     lots of spaces before and after     ";
      alert("'" + str + "'");

      str = jQuery.trim(str);
      alert("'" + str + "' - no longer");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Show Trim Example&amp;lt;/button&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Removes the two whitespaces at the start and at the end of the string.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $.trim("  hello, how are you?  ");
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="jQuery.unique" scope="static">
        <description/>
        <parameters>
          <parameter name="array" usage="required" type="Array">
            <description>The Array of Elements to translate.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Removes any duplicate elements from the array of divs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var divs = $("div").get();

    // add 3 elements of class dup too (they are divs)
    divs = divs.concat($(".dup").get());
    $("div:eq(1)").text("Pre-unique there are " + divs.length + " elements.");

    divs = jQuery.unique(divs);
    $("div:eq(2)").text("Post-unique there are " + divs.length + " elements.")
                  .css("color", "red");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;There are 6 divs in this document.&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="dup"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="dup"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="dup"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Removes any duplicate elements from the array of divs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $.unique(document.getElementsByTagName("div"));
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="keydown" scope="instance">
        <description>This causes all of the functions that have been bound to the keydown event to be executed, and calls the browser's default keydown action on the matching element(s). This default action can be prevented by returning false from one of the functions bound to the keydown event. The keydown event usually fires when a key on the keyboard is pressed.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
      </method>
      <method name="keydown" scope="instance">
        <description>The keydown event fires when a key on the keyboard is pressed.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the keydown event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To perform actions in response to keyboard presses on a page, try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(window).keydown(function(event){
  switch (event.keyCode) {
    // ...
    // different keys do different things
    // Different browsers provide different codes
    // see here for details: http://unixpapa.com/js/key.html    
    // ...
  }
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="keypress" scope="instance">
        <description>This causes all of the functions that have been bound to the keypress event to be executed, and calls the browser's default keypress action on the matching element(s). This default action can be prevented by returning false from one of the functions bound to the keypress event. The keypress event usually fires when a key on the keyboard is pressed.
</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
      </method>
      <method name="keypress" scope="instance">
        <description>The keypress event fires when a key on the keyboard is "clicked". A keypress is defined as a keydown and keyup on the same key. The sequence of these events is: &amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;keydown&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;keypress&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;keyup&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the keypress event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show spaces and letters when typed.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("input").keypress(function (e) {
      if (e.which == 32 || (65 &amp;lt;= e.which &amp;&amp; e.which &amp;lt;= 65 + 25)
                        || (97 &amp;lt;= e.which &amp;&amp; e.which &amp;lt;= 97 + 25)) {
        var c = String.fromCharCode(e.which);
        $("p").append($("&amp;lt;span/&amp;gt;"))
              .children(":last")
              .append(document.createTextNode(c));
      } else if (e.which == 8) {
        // backspace in IE only be on keydown
        $("p").children(":last").remove();
      }
      $("div").text(e.which);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;input type="text" /&amp;gt;
  &amp;lt;p&amp;gt;Add text - &amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="keyup" scope="instance">
        <description>This causes all of the functions that have been bound to the keyup event to be executed, and calls the browser's default keyup action on the matching element(s). This default action can be prevented by returning false from one of the functions bound to the keyup event. The keyup event usually fires when a key on the keyboard is released.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
      </method>
      <method name="keyup" scope="instance">
        <description>The keyup event fires when a key on the keyboard is released.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the keyup event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To perform an action when the escape key has been released:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(document).keyup(function(event){
    if (event.keyCode == 27) {
        alert('escaped!');
    }
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="live" scope="instance">
        <description>'''Possible event values:''' &amp;lt;code&amp;gt;click&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;dblclick&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt; mousedown&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;mouseup&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;mousemove&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;mouseover&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;mouseout&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;keydown&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;keypress&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;keyup&amp;lt;/code&amp;gt; &amp;lt;br&amp;gt; '''Currently not supported:''' &amp;lt;code&amp;gt;blur&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;focus&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;mouseenter&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;mouseleave&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;change&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;submit&amp;lt;/code&amp;gt;

&amp;lt;p&amp;gt;This method works and behaves very similarly to jQuery's bind method but with one important distinction: When you bind a "live" event it will bind to all current and future elements on the page (using [http://www.sitepoint.com/blogs/2008/07/23/javascript-event-delegation-is-easier-than-you-think/ event delegation]). For example if you bound a live click to all "li" elements on the page then added another li at a later time - that click event would continue to work for the new element (this is not the case with bind which must be re-bound on all new elements).&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;.live() behaves similarly to the popular [http://plugins.jquery.com/project/livequery liveQuery] plugin but with a few major differences:&amp;lt;/p&amp;gt;
* .live (currently) supports a subset of all events. Note the full list of supported/not-supported events above.
* .live doesn't support the no-event style callback that liveQuery provides. Only event handlers can be bound with .live.
* .live doesn't have a "setup" or "cleanup" step, since all events are delegated rather than bound directly to an element.

&amp;lt;p&amp;gt;To remove a live event you should use the die method.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="type" usage="required" type="String">
            <description>One or more event types separated by a space</description>
          </parameter>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the event on each of the set of matched elements
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Click a paragraph to add another. Note that live binds the click event to all paragraphs - even new ones.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").live("click", function(){
      $(this).after("&amp;lt;p&amp;gt;Another paragraph!&amp;lt;/p&amp;gt;");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Click me!&amp;lt;/p&amp;gt;
  &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To display each paragraph's text in an alert box whenever it is clicked:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").live("click", function(){
  alert( $(this).text() );
});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To cancel a default action and prevent it from bubbling up, return false:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("a").live("click", function() { return false; })
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To cancel only the default action by using the preventDefault method.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("a").live("click", function(event){
  event.preventDefault();
});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Can bind custom events too.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").live("myCustomEvent", function(e, myName, myValue){
      $(this).text("Hi there!");
      $("span").stop().css("opacity", 1)
               .text("myName = " + myName)
               .fadeIn(30).fadeOut(1000);
    });
    $("button").click(function () {
      $("p").trigger("myCustomEvent");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Has an attached custom event.&amp;lt;/p&amp;gt;
  &amp;lt;button&amp;gt;Trigger custom event&amp;lt;/button&amp;gt;
  &amp;lt;span style="display:none;"&amp;gt;&amp;lt;/span&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="load" scope="instance">
        <description>&amp;lt;p&amp;gt;A GET request will be performed by default - but if you pass in any extra parameters then a POST will occur.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;In jQuery 1.2 you can now specify a jQuery selector in the URL. Doing so will filter the incoming HTML document, only injecting the elements that match the selector. The syntax looks something like "url #some &amp;gt; selector". See the examples for more information.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="url" usage="required" type="String">
            <description>The URL of the HTML page to load.</description>
          </parameter>
          <parameter name="data" usage="optional" type="Map,String">
            <description>Key/value pairs that will be sent to the server. As of jQuery 1.3 a data string can be passed in instead.</description>
          </parameter>
          <parameter name="callback" usage="required" type="Callback">
            <description>The function called when the ajax request is complete (not necessarily success).
&amp;lt;pre&amp;gt;function (responseText, textStatus, XMLHttpRequest) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Load a piece of the documentation sidebar navigation into a custom unordered list.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("#links").load("/Main_Page #jq-p-Getting-Started li");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;b&amp;gt;jQuery Links:&amp;lt;/b&amp;gt;
&amp;lt;ul id="links"&amp;gt;&amp;lt;/ul&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Load the feeds.html file into the div with the ID of feeds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("#feeds").load("feeds.html");
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            pass arrays of data to the server.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $("#objectID").load("test.php", { 'choices[]': ["Jon", "Susan"] } );
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.
            &lt;/p&gt;
        
            &lt;pre&gt;
             $("#feeds").load("feeds.php", {limit: 25}, function(){
   alert("The last 25 entries in the feed have been loaded");
 });
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="load " scope="instance">
        <description>When bound to the window element, the event fires when the user agent finishes loading all content within a document, including window, frames, objects and images. For elements, it fires when the target element and all of its content has finished loading. Note: load will work only if you set it before the element has completely loaded, if you set it after that nothing will happen. This doesn't happen in $(document).ready(), which jQuery handles it to work as expected, also when setting it after the DOM has loaded.
 </description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the load event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Run a function when the page is fully loaded including graphics.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(window).load(function () {
  // run code
});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Add the class bigImg to all images with size greater then 100 upon each image load.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $('img.userIcon').load(function(){
  if($(this).height() &amp;gt; 100) {
    $(this).addClass('bigImg');
  }
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="map" scope="instance">
        <description>You could use this to build lists of values, attributes, css values - or even perform special, custom, selector transformations.

This is provided as a convenience method for using &amp;lt;a href='Utilities/jQuery.map'&amp;gt;$.map()&amp;lt;/a&amp;gt;.</description>
        <parameters>
          <parameter name="callback" usage="required" type="Function">
            <description>The function to execute on each element in the set.
&amp;lt;pre&amp;gt;function callback(index, domElement) {
  var replacement;

  this; // also dom element

  // replacement == null : delete spot
  // replacement == array : insert the elements of the array
  // else replace the spot with replacement
  return replacement;
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Build a list of all the values within a form.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").append( $("input").map(function(){
      return $(this).val();
    }).get().join(", ") );

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Values: &amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;form&amp;gt;
    &amp;lt;input type="text" name="name" value="John"/&amp;gt;
    &amp;lt;input type="text" name="password" value="password"/&amp;gt;
    &amp;lt;input type="text" name="url" value="http://ejohn.org/"/&amp;gt;
  &amp;lt;/form&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            A contrived example to show some functionality.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var mappedItems = $("li").map(function (index) {
      var replacement = $("&amp;lt;li&amp;gt;").text($(this).text()).get(0);
      if (index == 0) {
        // make the first item all caps
        $(replacement).text($(replacement).text().toUpperCase());
      } else if (index == 1 || index == 3) {
        // delete the second and fourth items
        replacement = null;
      } else if (index == 2) {
        // make two of the third item and add some text
        replacement = [replacement,$("&amp;lt;li&amp;gt;").get(0)];
        $(replacement[0]).append("&amp;lt;b&amp;gt; - A&amp;lt;/b&amp;gt;");
        $(replacement[1]).append("Extra &amp;lt;b&amp;gt; - B&amp;lt;/b&amp;gt;");
      }

      // replacment will be an dom element, null, 
      // or an array of dom elements
      return replacement;
    });
    $("#results").append(mappedItems);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;First&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Second&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Third&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Fourth&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Fifth&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;ul id="results"&amp;gt;
  &amp;lt;/ul&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="mousedown " scope="instance">
        <description>The mousedown event fires when the pointing device button is pressed over an element.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the mousedown event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show texts when mouseup and mousedown event triggering.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").mouseup(function(){
      $(this).append('&amp;lt;span style="color:#F00;"&amp;gt;Mouse up.&amp;lt;/span&amp;gt;');
    }).mousedown(function(){
      $(this).append('&amp;lt;span style="color:#00F;"&amp;gt;Mouse down.&amp;lt;/span&amp;gt;');
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Press mouse and release here.&amp;lt;/p&amp;gt;

            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="mousemove" scope="instance">
        <description>The mousemove event fires when the pointing device is moved while it is over an element. The event handler is passed one variable - the event object. Its .clientX and .clientY properties represent the coordinates of the mouse.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the mousmove event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window which in this case is the iframe.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").mousemove(function(e){
      var pageCoords = "( " + e.pageX + ", " + e.pageY + " )";
      var clientCoords = "( " + e.clientX + ", " + e.clientY + " )";
      $("span:first").text("( e.pageX, e.pageY ) - " + pageCoords);
      $("span:last").text("( e.clientX, e.clientY ) - " + clientCoords);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;   
    Try scrolling too.
    &amp;lt;span&amp;gt;Move the mouse over the div.&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;&amp;nbsp;&amp;lt;/span&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="mouseout" scope="instance">
        <description>The mouseout event fires when the pointing device is moved away from an element.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the mouseout event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show texts when mouseover and mouseout event triggering.
'''Mouseout''' fires when the pointer moves into or out from child element, while '''mouseleave''' doesn't.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var i = 0;
    $("div.overout").mouseout(function(){
      $("p:first",this).text("mouse out");
      $("p:last",this).text(++i);
    }).mouseover(function(){
      $("p:first",this).text("mouse over");
    });

    var n = 0;
    $("div.enterleave").bind("mouseenter",function(){
      $("p:first",this).text("mouse enter");
    }).bind("mouseleave",function(){
      $("p:first",this).text("mouse leave");
      $("p:last",this).text(++n);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            
&amp;lt;div class="out overout"&amp;gt;&amp;lt;p&amp;gt;move your mouse&amp;lt;/p&amp;gt;&amp;lt;div class="in overout"&amp;gt;&amp;lt;p&amp;gt;move your mouse&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;0&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;0&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class="out enterleave"&amp;gt;&amp;lt;p&amp;gt;move your mouse&amp;lt;/p&amp;gt;&amp;lt;div class="in enterleave"&amp;gt;&amp;lt;p&amp;gt;move your mouse&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;0&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;0&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;

            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="mouseover" scope="instance">
        <description>The mouseover event fires when the pointing device is moved onto an element.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the mouseover event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show texts when mouseover and mouseout event triggering.
'''Mouseover''' fires when the pointer moves into or out from child element, while '''mouseenter''' does't.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var i = 0;
    $("div.overout").mouseover(function(){
      $("p:first",this).text("mouse over");
      $("p:last",this).text(++i);
    }).mouseout(function(){
      $("p:first",this).text("mouse out");
    });

    var n = 0;
    $("div.enterleave").bind("mouseenter",function(){
      $("p:first",this).text("mouse enter");
      $("p:last",this).text(++n);
    }).bind("mouseleave",function(){
      $("p:first",this).text("mouse leave");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            
&amp;lt;div class="out overout"&amp;gt;&amp;lt;p&amp;gt;move your mouse&amp;lt;/p&amp;gt;&amp;lt;div class="in overout"&amp;gt;&amp;lt;p&amp;gt;move your mouse&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;0&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;0&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class="out enterleave"&amp;gt;&amp;lt;p&amp;gt;move your mouse&amp;lt;/p&amp;gt;&amp;lt;div class="in enterleave"&amp;gt;&amp;lt;p&amp;gt;move your mouse&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;0&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;0&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;

            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="mouseup" scope="instance">
        <description>The mouseup event fires when the pointing device button is released over an element.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the mouseup event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show texts when mouseup and mousedown event triggering.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").mouseup(function(){
      $(this).append('&amp;lt;span style="color:#F00;"&amp;gt;Mouse up.&amp;lt;/span&amp;gt;');
    }).mousedown(function(){
      $(this).append('&amp;lt;span style="color:#00F;"&amp;gt;Mouse down.&amp;lt;/span&amp;gt;');
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Press mouse and release here.&amp;lt;/p&amp;gt;

            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="next" scope="instance">
        <description>next only returns the very next sibling for each element, not all next siblings (see nextAll).

You may provide an optional expression to filter the returned set. </description>
        <parameters>
          <parameter name="expr" usage="optional" type="String">
            <description>An expression with which to filter the returned set.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Find the very next sibling of each disabled button and change its text "this button is disabled".
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("button[disabled]").next().text("this button is disabled");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;button disabled="disabled"&amp;gt;First&amp;lt;/button&amp;gt; - &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;button&amp;gt;Second&amp;lt;/button&amp;gt; - &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;button disabled="disabled"&amp;gt;Third&amp;lt;/button&amp;gt; - &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Find the very next sibling of each paragraph that has a class "selected".
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").next(".selected").css("background", "yellow");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p class="selected"&amp;gt;Hello Again&amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;And Again&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="nextAll" scope="instance">
        <description>Use an optional expression to filter the matched set. </description>
        <parameters>
          <parameter name="expr" usage="optional" type="String">
            <description>An expression to filter the next Elements with.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Locate all the divs after the first and give them a class.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("div:first").nextAll().addClass("after");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;first&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;sibling&amp;lt;div&amp;gt;child&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;sibling&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;sibling&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Locate all the paragraphs after the second child in the body and give them a class.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $(":nth-child(1)").nextAll("p").addClass("after");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;p&amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;div&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;p&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;p&amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;div&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;p&amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;div&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="not" scope="instance">
        <description/>
        <parameters>
          <parameter name="expr" usage="required" type="String, DOMElement, Array&lt;DOMElement&gt;">
            <description>An expression with which to remove matching elements, an element to remove from the set or a set of elements to remove from the jQuery set of matched elements.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Adds a border to divs that are not green or blue.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").not(".green, #blueone")
            .css("border-color", "red");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="blueone"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="green"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="green"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="gray"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Removes the element with the ID "selected" from the set of all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").not( $("#selected")[0] )
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Removes the element with the ID "selected" from the set of all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").not("#selected")
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Removes all elements that match "div p.selected" from the total set of all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").not($("div p.selected"))
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="offset" scope="instance">
        <description>The returned object contains two &amp;lt;a href='Types#Integer'&amp;gt;Integer&amp;lt;/a&amp;gt; properties, top and left. The method works only with visible elements. </description>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Access the offset of the second paragraph:
            &lt;/p&gt;
        
            &lt;pre&gt;
            var p = $("p:last");
var offset = p.offset();
p.html( "left: " + offset.left + ", top: " + offset.top );
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2nd Paragraph&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Click to see the offset.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("*", document.body).click(function (e) {
      var offset = $(this).offset();
      e.stopPropagation();
      $("#result").text(this.tagName + " coords ( " + offset.left + ", " +
                                      offset.top + " )");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div id="result"&amp;gt;Click an element.&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;
    This is the best way to &amp;lt;span&amp;gt;find&amp;lt;/span&amp;gt; an offset.
  &amp;lt;/p&amp;gt;
  &amp;lt;div class="abs"&amp;gt;
  &amp;lt;/dov&amp;gt;
  
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="offsetParent" scope="instance">
        <description>This is the first parent of the element that has position (as in relative or absolute). This method only works with visible elements.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
      </method>
      <method name="one" scope="instance">
        <description>&amp;lt;p&amp;gt;The handler is executed only once for each element. Otherwise, the same rules as described in &amp;lt;a href='Events/bind'&amp;gt;bind&amp;lt;/a&amp;gt;() apply. The event handler is passed an event object that you can use to prevent default behaviour. To stop both default action and event bubbling, your handler should return false.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;In most cases, you can define your event handlers as anonymous functions (see first example). In cases where that is not possible, you can pass additional data as the second paramter (and the handler function as the third), see second example.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="type" usage="required" type="String">
            <description>An event type</description>
          </parameter>
          <parameter name="data" usage="optional" type="Object">
            <description>Additional data passed to the event handler as event.data</description>
          </parameter>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the specified event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Tie a one-time click to each div.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var n = 0;
    $("div").one("click", function(){
      var index = $("div").index(this);
      $(this).css({ borderStyle:"inset",
                    cursor:"auto" });
      $("p").text("Div at index #" + index + " clicked." +
                  "  That's " + ++n + " total clicks.");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;Click a green square...&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To display the text of all paragraphs in an alert box the first time each of them is clicked:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").one("click", function(){
  alert( $(this).text() );
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="outerHeight" scope="instance">
        <description> This method works for both visible and hidden elements.</description>
        <parameters>
          <parameter name="options" usage="optional" type="Options">
            <description>A set of key/value pairs that configure the outerHeight method. All options are optional.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Integer"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get outerHeight
            &lt;/p&gt;
        
            &lt;pre&gt;
            var p = $("p:first");
$("p:last").text( "outerHeight:" + p.outerHeight() + " , outerHeight(true):" + p.outerHeight(true) );

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="outerWidth" scope="instance">
        <description>This method works for both visible and hidden elements. The margin can be included by passing an options map with margin set to true.</description>
        <parameters>
          <parameter name="options" usage="optional" type="Options">
            <description>A set of key/value pairs that configure the outerWidth method. All options are optional.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Integer"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get outerWidth
            &lt;/p&gt;
        
            &lt;pre&gt;
            var p = $("p:first");
$("p:last").text( "outerWidth:" + p.outerWidth()+ " , outerWidth(true):" + p.outerWidth(true) );

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="parent" scope="instance">
        <description>You may use an optional expression to filter the set of parent elements that will match.  If there is no parent, returns a jQuery object with a length of 0.</description>
        <parameters>
          <parameter name="expr" usage="optional" type="String">
            <description>An expression to filter the parents with.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Shows the parent of each element as (parent &amp;gt; child).  Check the View Source to see the raw html.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("*", document.body).each(function () {
      var parentTag = $(this).parent().get(0).tagName;
      $(this).prepend(document.createTextNode(parentTag + " &amp;gt; "));
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;div, 
    &amp;lt;span&amp;gt;span, &amp;lt;/span&amp;gt;
    &amp;lt;b&amp;gt;b &amp;lt;/b&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;p, 
    &amp;lt;span&amp;gt;span, 
      &amp;lt;em&amp;gt;em &amp;lt;/em&amp;gt;
    &amp;lt;/span&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;div, 
    &amp;lt;strong&amp;gt;strong, 
      &amp;lt;span&amp;gt;span, &amp;lt;/span&amp;gt;
      &amp;lt;em&amp;gt;em, 
        &amp;lt;b&amp;gt;b, &amp;lt;/b&amp;gt;
      &amp;lt;/em&amp;gt;
    &amp;lt;/strong&amp;gt;
    &amp;lt;b&amp;gt;b &amp;lt;/b&amp;gt;
  &amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Find the parent element of each paragraph with a class "selected".
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").parent(".selected").css("background", "yellow");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="selected"&amp;gt;&amp;lt;p&amp;gt;Hello Again&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;

            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="parents" scope="instance">
        <description/>
        <parameters>
          <parameter name="expr" usage="optional" type="String">
            <description>An expression to filter the ancestors with</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Find all parent elements of each b.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var parentEls = $("b").parents()
                          .map(function () { 
                                return this.tagName; 
                              })
                          .get().join(", ");
    $("b").append("&amp;lt;strong&amp;gt;" + parentEls + "&amp;lt;/strong&amp;gt;");

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;span&amp;gt;
        &amp;lt;b&amp;gt;My parents are: &amp;lt;/b&amp;gt;
      &amp;lt;/span&amp;gt;
    &amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Click to find all unique div parent elements of each span.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    function showParents() {
      $("div").css("border-color", "white");
      var len = $("span.selected")
                       .parents("div")
                       .css("border", "2px red solid")
                       .length;
      $("b").text("Unique div parents: " + len);
    }
    $("span").click(function () {
      $(this).toggleClass("selected");
      showParents();
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;span&amp;gt;Hello Again&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;span&amp;gt;And Hello Again&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;b&amp;gt;Click Hellos to toggle their parents.&amp;lt;/b&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="position" scope="instance">
        <description>The returned object contains two &amp;lt;a href='Types#Integer'&amp;gt;Integer&amp;lt;/a&amp;gt; properties, top and left. For accurate calculations make sure to use pixel values for margins, borders and padding. This method only works with visible elements. </description>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Access the position of the second paragraph:
            &lt;/p&gt;
        
            &lt;pre&gt;
            var p = $("p:first");
var position = p.position();
$("p:last").text( "left: " + position.left + ", top: " + position.top );
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="prepend" scope="instance">
        <description>This operation is the best way to insert elements inside, at the beginning, of all matched elements.</description>
        <parameters>
          <parameter name="content" usage="required" type="String, Element, jQuery">
            <description>Content to prepend to the target.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Prepends some HTML to all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").prepend("&amp;lt;b&amp;gt;Hello &amp;lt;/b&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;there friend!&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;amigo!&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Prepends a DOM Element to all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").prepend(document.createTextNode("Hello "));
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;is what I'd say&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;is what I said&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").prepend( $("b") );
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt; is what was said.&amp;lt;/p&amp;gt;&amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="prependTo" scope="instance">
        <description>This operation is, essentially, the reverse of doing a regular $(A).prepend(B), in that instead of prepending B to A, you're prepending A to B.</description>
        <parameters>
          <parameter name="selector" usage="required" type="Selector">
            <description>target to which the content will be prepended.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Prepends all spans to the element with the ID "foo"
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("span").prependTo("#foo"); // check prepend() examples
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div id="foo"&amp;gt;FOO!&amp;lt;/div&amp;gt;
  &amp;lt;span&amp;gt;I have something to say... &amp;lt;/span&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="prev" scope="instance">
        <description>Use an optional expression to filter the matched set.

Only the immediately previous sibling is returned, not all previous siblings. </description>
        <parameters>
          <parameter name="expr" usage="optional" type="String">
            <description>An expression to filter the previous Elements with.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Find the very previous sibling of each div.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var $curr = $("#start");
    $curr.css("background", "#f99");
    $("button").click(function () {
      $curr = $curr.prev();
      $("div").css("background", "");
      $curr.css("background", "#f99");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;has child&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id="start"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;button&amp;gt;Go to Prev&amp;lt;/button&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Find the very previous sibling of each paragraph that has a class "selected".
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").prev(".selected").css("background", "yellow");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;p class="selected"&amp;gt;Hello Again&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;And Again&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="prevAll" scope="instance">
        <description>Use an optional expression to filter the matched set. </description>
        <parameters>
          <parameter name="expr" usage="optional" type="String">
            <description>An expression to filter the previous elements with.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Locate all the divs in front of the last div and give them a class.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("div:last").prevAll().addClass("before");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="queue" scope="instance">
        <description/>
        <parameters>
          <parameter name="name" usage="optional" type="String">
            <description>The queue name (fx by default)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array&lt;Function&gt;"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show the length of the queue.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("#show").click(function () {
      var n = $("div").queue("fx");
      $("span").text("Queue length is: " + n.length);
    });
    function runIt() {
      $("div").show("slow");
      $("div").animate({left:'+=200'},2000);
      $("div").slideToggle(1000);
      $("div").slideToggle("fast");
      $("div").animate({left:'-=200'},1500);
      $("div").hide("slow");
      $("div").show(1200);
      $("div").slideUp("normal", runIt);
    }
    runIt();

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="show"&amp;gt;Show Length of Queue&amp;lt;/button&amp;gt;
  &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="queue" scope="instance">
        <description/>
        <parameters>
          <parameter name="name" usage="optional" type="String">
            <description>The queue name (fx by default)</description>
          </parameter>
          <parameter name="callback" usage="required" type="Function">
            <description>The function to add to the queue.
&amp;lt;pre&amp;gt;function callback() {
  this; // dom element
  // to continue the queue you must call
  jQuery(this).dequeue();
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Queue a custom function.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $(document.body).click(function () {
      $("div").show("slow");
      $("div").animate({left:'+=200'},2000);
      $("div").queue(function () {
        $(this).addClass("newcolor");
        $(this).dequeue();
      });
      $("div").animate({left:'-=200'},500);
      $("div").queue(function () {
        $(this).removeClass("newcolor");
        $(this).dequeue();
      });
      $("div").slideUp();
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            Click here...
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="queue" scope="instance">
        <description/>
        <parameters>
          <parameter name="name" usage="optional" type="String">
            <description>The queue name (fx by default)</description>
          </parameter>
          <parameter name="queue" usage="required" type="Array&lt;Function&gt;">
            <description>The queue to replace all the queues with.  The functions have the same parameters and this value as queue(callback).</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Set a queue array to delete the queue.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("#start").click(function () {
      $("div").show("slow");
      $("div").animate({left:'+=200'},5000);
      $("div").queue(function () {
        $(this).addClass("newcolor");
        $(this).dequeue();
      });
      $("div").animate({left:'-=200'},1500);
      $("div").queue(function () {
        $(this).removeClass("newcolor");
        $(this).dequeue();
      });
      $("div").slideUp();
    });
    $("#stop").click(function () {
      $("div").queue("fx", []);
      $("div").stop();
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="start"&amp;gt;Start&amp;lt;/button&amp;gt;
  &amp;lt;button id="stop"&amp;gt;Stop&amp;lt;/button&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="ready" scope="instance">
        <description>&amp;lt;p&amp;gt;This is probably the most important function included in the event module, as it can greatly improve the response times of your web applications.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;In a nutshell, this is a solid replacement for using window.onload, and attaching a function to that. By using this method, your bound function will be called the instant the DOM is ready to be read and manipulated, which is when 99.99% of all JavaScript code needs to run.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;There is one argument passed to the ready event handler: A reference to the jQuery function. You can name that argument whatever you like, and can therefore stick with the $ alias without risk of naming collisions.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;You can have as many $(document).ready events on your page as you like. The functions are then executed in the order they were added.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;'''Note:''' Please make sure that all of your stylesheets are included before your scripts (especially those that call the ready function). Doing so will make sure that all of your styling is loaded and ready before your jQuery code begins executing.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>The function to be executed when the DOM is ready.
&amp;lt;pre&amp;gt;function callback(jQueryReference) {
  this; // document
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Display a message when the DOM is loaded.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(document).ready(function () {
    $("p").text("The DOM is now loaded and can be manipulated.");
});
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To run code when the DOM loads, write:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(document).ready(function(){
  // Your code here...
});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To use both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias, write:
            &lt;/p&gt;
        
            &lt;pre&gt;
            jQuery(function($) {
  // Your code using failsafe $ alias here...
});
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Commonly written as:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(function() {
  // Your code here...
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="remove" scope="instance">
        <description>This does NOT remove them from the jQuery object, allowing you to use the matched elements further.  Note that this function starting with 1.2.2 will also remove all event handlers and internally cached data.  So:

&amp;lt;code&amp;gt;
$("#foo").remove().appendTo("#bar");
&amp;lt;/code&amp;gt;

should be written as

&amp;lt;code&amp;gt;
$("#foo").appendTo("#bar");
&amp;lt;/code&amp;gt;

to avoid losing the event handlers.

Can be filtered with an optional expression.</description>
        <parameters>
          <parameter name="expr" usage="optional" type="String">
            <description>A jQuery expression to filter the set of elements to be removed.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Removes all paragraphs from the DOM
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $("p").remove();
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt; 
  how are 
  &amp;lt;p&amp;gt;you?&amp;lt;/p&amp;gt;
  &amp;lt;button&amp;gt;Call remove() on paragraphs
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Removes all paragraphs that contain "Hello" from the DOM
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $("p").remove(":contains('Hello')");
    });


            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p class="hello"&amp;gt;Hello&amp;lt;/p&amp;gt;
  how are 
  &amp;lt;p&amp;gt;you?&amp;lt;/p&amp;gt;
  &amp;lt;button&amp;gt;Call remove(":contains('Hello')") on paragraphs
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="removeAttr" scope="instance">
        <description/>
        <parameters>
          <parameter name="name" usage="required" type="String">
            <description>The name of the property to remove.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Clicking the button enables the input next to it.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $(this).next().removeAttr("disabled")
             .focus()
             .val("editable now");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Enable&amp;lt;/button&amp;gt;
  &amp;lt;input type="text" disabled="disabled" value="can't edit this" /&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="removeClass" scope="instance">
        <description/>
        <parameters>
          <parameter name="class" usage="optional" type="String">
            <description>One or more CSS classes to remove from the elements, these are separated by spaces.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Remove the class 'blue' from the matched elements.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p:even").removeClass("blue");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p class="blue under"&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue under highlight"&amp;gt;and&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue under"&amp;gt;then&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue under"&amp;gt;Goodbye&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Remove the class 'blue' and 'under' from the matched elements.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p:odd").removeClass("blue under");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p class="blue under"&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue under highlight"&amp;gt;and&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue under"&amp;gt;then&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue under"&amp;gt;Goodbye&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Remove all the classes from the matched elements.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p:eq(1)").removeClass();
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p class="blue under"&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue under highlight"&amp;gt;and&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue under"&amp;gt;then&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue under"&amp;gt;Goodbye&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="removeData" scope="instance">
        <description>This is the complement function to $(...).data(name, value).</description>
        <parameters>
          <parameter name="name" usage="required" type="String">
            <description>The name of the data store property to remove.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Set a data store for 2 names then remove one of them.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("span:eq(0)").text("" + $("div").data("test1"));
    $("div").data("test1", "VALUE-1");
    $("div").data("test2", "VALUE-2");
    $("span:eq(1)").text("" + $("div").data("test1"));
    $("div").removeData("test1");
    $("span:eq(2)").text("" + $("div").data("test1"));
    $("span:eq(3)").text("" + $("div").data("test2"));

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;value1 before creation: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;value1 after creation: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;value1 after removal: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;value2 after removal: &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="replaceAll" scope="instance">
        <description>This function is the complement to replaceWith() which does the same task with the parameters reversed.</description>
        <parameters>
          <parameter name="selector" usage="required" type="Selector">
            <description>The elements to find and replace the matched elements with.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Replace all the paragraphs with bold words.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("&amp;lt;b&amp;gt;Paragraph. &amp;lt;/b&amp;gt;").replaceAll("p"); // check replaceWith() examples
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="replaceWith" scope="instance">
        <description/>
        <parameters>
          <parameter name="content" usage="required" type="String, Element, jQuery">
            <description>Content to replace the matched elements with.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            On click, replace the button with a div containing the same word.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $(this).replaceWith("&amp;lt;div&amp;gt;" + $(this).text() + "&amp;lt;/div&amp;gt;");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;First&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;Second&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;Third&amp;lt;/button&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Replace all the paragraphs with bold words.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").replaceWith("&amp;lt;b&amp;gt;Paragraph. &amp;lt;/b&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Replace all the paragraphs with empty div elements.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").replaceWith(document.createElement("div"));
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            On click, replace each paragraph with a jQuery div object that is already in the DOM.  Notice it doesn't clone the object but rather moves it to replace the paragraph.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").click(function () {
      $(this).replaceWith($("div"));
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
  &amp;lt;div&amp;gt;Replaced!&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="resize" scope="instance">
        <description>The resize event fires when a document view is resized</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the resize event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To make resizing the web page window a pain in the neck, try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(window).resize(function(){
  alert("Stop it!");
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="scroll" scope="instance">
        <description>The scroll event fires when a document view is scrolled.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the scroll event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To do something when your page is scrolled:
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").clone().appendTo(document.body);
    $("p").clone().appendTo(document.body);
    $("p").clone().appendTo(document.body);
    $(window).scroll(function () { 
      $("span").css("display", "inline").fadeOut("slow"); 
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;Try scrolling the iframe.&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;Paragraph - &amp;lt;span&amp;gt;Scroll happened!&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="scrollLeft" scope="instance">
        <description> This method works for both visible and hidden elements.</description>
        <return-types>
          <return-type type="Integer"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get scrollLeft
            &lt;/p&gt;
        
            &lt;pre&gt;
            var p = $("p:first");
$("p:last").text( "scrollLeft:" + p.scrollLeft() );

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="scrollLeft" scope="instance">
        <description> This method works for both visible and hidden elements.</description>
        <parameters>
          <parameter name="val" usage="required" type="Number">
            <description>A positive number representing the desired scroll left offset.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get scrollLeft
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("div.demo").scrollLeft(300);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div class="demo"&amp;gt;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="scrollTop" scope="instance">
        <description> This method works for both visible and hidden elements.</description>
        <return-types>
          <return-type type="Integer"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get scrollTop
            &lt;/p&gt;
        
            &lt;pre&gt;
            var p = $("p:first");
$("p:last").text( "scrollTop:" + p.scrollTop() );

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="scrollTop" scope="instance">
        <description> This method works for both visible and hidden elements.</description>
        <parameters>
          <parameter name="val" usage="required" type="Number">
            <description>A positive number representing the desired scroll top offset.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get scrollTop
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("div.demo").scrollTop(300);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div class="demo"&amp;gt;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="select" scope="instance">
        <description>This causes all of the functions that have been bound to that select event to be executed, and calls the browser's default select action on the matching element(s). This default action can be prevented by returning false from one of the functions bound to the select event.


Note: Do not confuse the "select" event with the "&amp;lt;a href='Events/change'&amp;gt;change&amp;lt;/a&amp;gt;" event, which is the one triggered when an html "select" element is having its selected option modified by the user.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To trigger the select event on all input elements, try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("input").select();
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="select" scope="instance">
        <description>The select event fires when a user selects some text in a text field, including input and textarea.</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the select event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To do something when text in input boxes is selected:
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $(document).select( function () { 
      $("div").text("Something was selected").show().fadeOut(1000); 
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;
    Click and drag the mouse to select text in the inputs.
  &amp;lt;/p&amp;gt;
  &amp;lt;input type="text" value="Some text" /&amp;gt;
  &amp;lt;input type="text" value="to test on" /&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="serialize" scope="instance">
        <description>Serialize is typically used to prepare user input data to be posted to a server.  The serialized data is in a standard format that is compatible with almost all server side programming languages and frameworks.

In order to work properly '''serialize requires that form fields have a name''' attribute.  Having only an id will not work.  Note the name attribute in this field:


&amp;lt;input id="email" name="email" type="text" /&amp;gt;


'''Versions'''

As of jQuery 1.2 the serialize method correctly serializes forms. 

For older versions of jQuery, the [http://www.malsup.com/jquery/form/ Form Plugin's] fieldSerialize method should be used.</description>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Serialize a form to a query string, that could be sent to a server in an Ajax request.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    function showValues() {
      var str = $("form").serialize();
      $("#results").text(str);
    }

    $(":checkbox, :radio").click(showValues);
    $("select").change(showValues);
    showValues();

            &lt;/pre&gt;
        
            &lt;pre&gt;
            
&amp;lt;form&amp;gt;
    &amp;lt;select name="single"&amp;gt;
      &amp;lt;option&amp;gt;Single&amp;lt;/option&amp;gt;
      &amp;lt;option&amp;gt;Single2&amp;lt;/option&amp;gt;
    &amp;lt;/select&amp;gt;
&amp;lt;br /&amp;gt;
    &amp;lt;select name="multiple" multiple="multiple"&amp;gt;
      &amp;lt;option selected="selected"&amp;gt;Multiple&amp;lt;/option&amp;gt;
      &amp;lt;option&amp;gt;Multiple2&amp;lt;/option&amp;gt;
      &amp;lt;option selected="selected"&amp;gt;Multiple3&amp;lt;/option&amp;gt;
    &amp;lt;/select&amp;gt;
&amp;lt;br/&amp;gt;
    &amp;lt;input type="checkbox" name="check" value="check1" id="ch1"/&amp;gt;
    &amp;lt;label for="ch1"&amp;gt;check1&amp;lt;/label&amp;gt;

    &amp;lt;input type="checkbox" name="check" value="check2" checked="checked" id="ch2"/&amp;gt;
    &amp;lt;label for="ch2"&amp;gt;check2&amp;lt;/label&amp;gt;
&amp;lt;br /&amp;gt;
    &amp;lt;input type="radio" name="radio" value="radio1" checked="checked" id="r1"/&amp;gt;
    &amp;lt;label for="r1"&amp;gt;radio1&amp;lt;/label&amp;gt;
    &amp;lt;input type="radio" name="radio" value="radio2" id="r2"/&amp;gt;
    &amp;lt;label for="r2"&amp;gt;radio2&amp;lt;/label&amp;gt;
  &amp;lt;/form&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;tt id="results"&amp;gt;&amp;lt;/tt&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="serializeArray" scope="instance">
        <description>The returned JSON structure consists of an Array of Objects where each Object contains one or two keys: &amp;lt;tt&amp;gt;name&amp;lt;/tt&amp;gt; for the parameter name and &amp;lt;tt&amp;gt;value&amp;lt;/tt&amp;gt; for the parameter value if set/not empty.&amp;lt;br /&amp;gt;Example:
&amp;lt;code&amp;gt;
   [ 
      {name: 'firstname', value: 'Hello'}, 
      {name: 'lastname', value: 'World'},
      {name: 'alias'}, // this one was empty
   ]
&amp;lt;/code&amp;gt;</description>
        <return-types>
          <return-type type="Array&lt;Object&gt;"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get the values from a form, iterate through them, and append them to a results display.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    function showValues() {
      var fields = $(":input").serializeArray();
      $("#results").empty();
      jQuery.each(fields, function(i, field){
        $("#results").append(field.value + " ");
      });
    }

    $(":checkbox, :radio").click(showValues);
    $("select").change(showValues);
    showValues();

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Results:&amp;lt;/b&amp;gt; &amp;lt;span id="results"&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;form&amp;gt;
    &amp;lt;select name="single"&amp;gt;
      &amp;lt;option&amp;gt;Single&amp;lt;/option&amp;gt;
      &amp;lt;option&amp;gt;Single2&amp;lt;/option&amp;gt;
    &amp;lt;/select&amp;gt;
    &amp;lt;select name="multiple" multiple="multiple"&amp;gt;
      &amp;lt;option selected="selected"&amp;gt;Multiple&amp;lt;/option&amp;gt;
      &amp;lt;option&amp;gt;Multiple2&amp;lt;/option&amp;gt;
      &amp;lt;option selected="selected"&amp;gt;Multiple3&amp;lt;/option&amp;gt;
    &amp;lt;/select&amp;gt;&amp;lt;br/&amp;gt;
    &amp;lt;input type="checkbox" name="check" value="check1" id="ch1"/&amp;gt;
    &amp;lt;label for="ch1"&amp;gt;check1&amp;lt;/label&amp;gt;
    &amp;lt;input type="checkbox" name="check" value="check2" checked="checked" id="ch2"/&amp;gt;
    &amp;lt;label for="ch2"&amp;gt;check2&amp;lt;/label&amp;gt;
    &amp;lt;input type="radio" name="radio" value="radio1" checked="checked" id="r1"/&amp;gt;
    &amp;lt;label for="r1"&amp;gt;radio1&amp;lt;/label&amp;gt;
    &amp;lt;input type="radio" name="radio" value="radio2" id="r2"/&amp;gt;
    &amp;lt;label for="r2"&amp;gt;radio2&amp;lt;/label&amp;gt;
  &amp;lt;/form&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="show" scope="instance">
        <description>Same as &amp;lt;a href='Effects/show#speedcallback'&amp;gt;show( speed, [callback] )&amp;lt;/a&amp;gt; without animations. Doesn't change anything if the selected elements are all visible. It doesn't matter if the element is hidden via a hide() call, or via a display:none in a stylesheet.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Shows all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").show()
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p style="display:none"&amp;gt;Hello&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="show" scope="instance">
        <description>&amp;lt;p&amp;gt;The height, width, and opacity of each of the matched elements are changed dynamically according to the specified speed. As of jQuery 1.3 the padding and margin are also animated, creating a smoother effect.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="speed" usage="required" type="String, Number">
            <description>A string representing one of the three predefined speeds ("slow", "normal", or "fast") or the number of milliseconds to run the animation (e.g. 1000).</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the animation completes; executes once for each element animated against.
&amp;lt;pre&amp;gt;function callback() {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $("p").show("slow");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Show it&amp;lt;/button&amp;gt;
  &amp;lt;p style="display: none"&amp;gt;Hello&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Animates all hidden divs to show fastly in order, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("#showr").click(function () {
      $("div:eq(0)").show("fast", function () {
        // use callee so don't have to name the function
        $(this).next().show("fast", arguments.callee); 
      });
    });
    $("#hidr").click(function () {
      $("div").hide(2000);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="showr"&amp;gt;Show&amp;lt;/button&amp;gt;
  &amp;lt;button id="hidr"&amp;gt;Hide&amp;lt;/button&amp;gt;
  &amp;lt;div&amp;gt;Hello,&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;how&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;are&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;you?&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Animates all span and input elements to show normally. Once the animation is done, it changes the text.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    function doIt() {
      $("span,div").show("normal");
    }
    $("button").click(doIt); // can pass in function name
    $("form").submit(function () {
      if ($("input").val() == "yes") {
        $("p").show(4000, function () {
          $(this).text("Ok, DONE! (now showing)");
        });
      }
      $("span,div").hide("normal");
      return false; // to stop the submit
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Do it!&amp;lt;/button&amp;gt;
  &amp;lt;span&amp;gt;Are you sure? (type 'yes' if you are) &amp;lt;/span&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;form&amp;gt;
      &amp;lt;input type="text" /&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;p style="display:none;"&amp;gt;I'm hidden...&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="siblings" scope="instance">
        <description/>
        <parameters>
          <parameter name="expr" usage="optional" type="String">
            <description>An expression to filter the sibling Elements with</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var len = $(".hilite").siblings()
                          .css("color", "red")
                          .length;
    $("b").text(len);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;One&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Two&amp;lt;/li&amp;gt;
    &amp;lt;li class="hilite"&amp;gt;Three&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Four&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Five&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Six&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Seven&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Eight&amp;lt;/li&amp;gt;
    &amp;lt;li class="hilite"&amp;gt;Nine&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Ten&amp;lt;/li&amp;gt;
    &amp;lt;li class="hilite"&amp;gt;Eleven&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;p&amp;gt;Unique siblings: &amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Find all siblings with a class "selected" of each div.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").siblings(".selected").css("background", "yellow");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;p class="selected"&amp;gt;Hello Again&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;And Again&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="size   " scope="instance">
        <description>This returns the same number as the '&amp;lt;a href='Core/length'&amp;gt;length&amp;lt;/a&amp;gt;' property of the jQuery object. However, it is slightly slower, so length should be used instead.    
    </description>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Count the divs. Click to add more.  
    
            &lt;/p&gt;
        
            &lt;pre&gt;
                
     $(document.body).click(function () {   
     $(document.body).append($("&amp;lt;div&amp;gt;")); 
     var n = $("div").size();   
     $("span").text("There are " + n + " divs." +   
     "Click to add more."); 
     }).click(); // trigger the click to start  
        
    
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;   
     &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;    
    
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="slice" scope="instance">
        <description>Behaves exactly like the built-in Array slice method. </description>
        <parameters>
          <parameter name="start" usage="required" type="Integer">
            <description>Where to start the subset. The first element is at zero. Can be negative to start from the end of the selection.</description>
          </parameter>
          <parameter name="end" usage="optional" type="Integer">
            <description>Where to end the subset (does not include the end element itself). If unspecified, ends at the end of the selection.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Turns divs yellow based on a random slice.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    function colorEm() {
      var $div = $("div");
      var start = Math.floor(Math.random() *
                             $div.length);
      var end = Math.floor(Math.random() *
                           ($div.length - start)) +
                           start + 1;
      if (end == $div.length) end = undefined;
      $div.css("background", "");
      if (end) 
        $div.slice(start, end).css("background", "yellow");   
       else
        $div.slice(start).css("background", "yellow");
      
      $("span").text('$("div").slice(' + start +
                     (end ? ', ' + end : '') +
                     ').css("background", "yellow");');
    }

    $("button").click(colorEm);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Turn slice yellow&amp;lt;/button&amp;gt;
  &amp;lt;span&amp;gt;Click the button!&amp;lt;/span&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Selects all paragraphs, then slices the selection to include only the first element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").slice(0, 1).wrapInner("&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;");
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Selects all paragraphs, then slices the selection to include only the first and second element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").slice(0, 2).wrapInner("&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;");
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Selects all paragraphs, then slices the selection to include only the second element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").slice(1, 2).wrapInner("&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;");
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Selects all paragraphs, then slices the selection to include only the second and third element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").slice(1).wrapInner("&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;");
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Selects all paragraphs, then slices the selection to include only the third element.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").slice(-1).wrapInner("&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;");
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="slideDown" scope="instance">
        <description>Only the height is adjusted for this animation, causing all matched elements to be revealed in a "sliding" manner. As of jQuery 1.3 the vertical padding and vertical margin are also animated, creating a smoother effect.</description>
        <parameters>
          <parameter name="speed" usage="required" type="String, Number">
            <description>A string representing one of the three predefined speeds ("slow", "normal", or "fast") or the number of milliseconds to run the animation (e.g. 1000).</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the animation completes, executes once for each element animated against.
&amp;lt;pre&amp;gt;function callback() {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Animates all divs to slide down and show themselves over 600 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $(document.body).click(function () {
      if ($("div:first").is(":hidden")) {
        $("div").slideDown("slow");
      } else {
        $("div").hide();
      }
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            Click me!
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").click(function () {
      $(this).css({ borderStyle:"inset", cursor:"wait" });
      $("input").slideDown(1000,function(){
        $(this).css("border", "2px red inset")
               .filter(".middle")
                 .css("background", "yellow")
                 .focus();
        $("div").css("visibility", "hidden");
      });
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;Push!&amp;lt;/div&amp;gt;
  &amp;lt;input type="text" /&amp;gt;
  &amp;lt;input type="text" class="middle" /&amp;gt;
  &amp;lt;input type="text" /&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="slideToggle" scope="instance">
        <description>Only the height is adjusted for this animation, causing all matched elements to be hidden or shown in a "sliding" manner. As of jQuery 1.3 the vertical padding and vertical margin are also animated, creating a smoother effect.</description>
        <parameters>
          <parameter name="speed" usage="required" type="String, Number">
            <description>A string representing one of the three predefined speeds ("slow", "normal", or "fast") or the number of milliseconds to run the animation (e.g. 1000).</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the animation completes, executes once for each element animated against.
&amp;lt;pre&amp;gt;function callback() {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $("p").slideToggle("slow");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Toggle&amp;lt;/button&amp;gt;
  &amp;lt;p&amp;gt;
    This is the paragraph to end all paragraphs.  You
    should feel &amp;lt;em&amp;gt;lucky&amp;lt;/em&amp;gt; to have seen such a paragraph in
    your life.  Congratulations!
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Animates divs between dividers with a toggle that makes some appear and some disappear.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("#aa").click(function () {
      $("div:not(.still)").slideToggle("slow", function () {
        var n = parseInt($("span").text(), 10);
        $("span").text(n + 1);
      });
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id =aa&amp;gt;Toggle&amp;lt;/button&amp;gt; There have been &amp;lt;span&amp;gt;0&amp;lt;/span&amp;gt; toggled divs.
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class="still"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div style="display:none;"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class="still"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class="still"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="hider"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class="still"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="hider"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class="still"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="slideUp" scope="instance">
        <description>Only the height is adjusted for this animation, causing all matched elements to be hidden in a "sliding" manner. As of jQuery 1.3 the vertical padding and vertical margin are also animated, creating a smoother effect.</description>
        <parameters>
          <parameter name="speed" usage="required" type="String, Number">
            <description>A string representing one of the three predefined speeds ("slow", "normal", or "fast") or the number of milliseconds to run the animation (e.g. 1000).</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the animation completes, executes once for each element animated against.
&amp;lt;pre&amp;gt;function callback() {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Animates all divs to slide up, completing the animation within 400 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $(document.body).click(function () {
      if ($("div:first").is(":hidden")) {
        $("div").show("slow");
      } else {
        $("div").slideUp();
      }
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            Click me!
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Animates all paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $(this).parent().slideUp("slow", function () {
        $("#msg").text($("button", this).text() + " has completed.");
      });
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;
    &amp;lt;button&amp;gt;Hide One&amp;lt;/button&amp;gt;
    &amp;lt;input type="text" value="One" /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;button&amp;gt;Hide Two&amp;lt;/button&amp;gt;
    &amp;lt;input type="text" value="Two" /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;button&amp;gt;Hide Three&amp;lt;/button&amp;gt;
    &amp;lt;input type="text" value="Three" /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div id="msg"&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="stop" scope="instance">
        <description>If any animations are queued to run (and the clearQueue argument is not set to true), then they will begin immediately. </description>
        <parameters>
          <parameter name="clearQueue" usage="optional" type="Boolean">
            <description>A Boolean (true/false) that when set to true clears the animation queue, effectively stopping all queued animations.</description>
          </parameter>
          <parameter name="gotoEnd" usage="optional" type="Boolean">
            <description>A Boolean (true/false) that when set to true causes the currently playing animation to immediately complete, including resetting original styles on show and hide and calling the callback function</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Click the Go button once to start the animation, then click the STOP button to stop it where it's currently positioned.  Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    // Start animation
    $("#go").click(function(){
      $(".block").animate({left: '+=100px'}, 2000);
    });

    // Stop animation when button is clicked
    $("#stop").click(function(){
      $(".block").stop();
    });

    // Start animation in the opposite direction
    $("#back").click(function(){
      $(".block").animate({left: '-=100px'}, 2000);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="go"&amp;gt;Go&amp;lt;/button&amp;gt; 
  &amp;lt;button id="stop"&amp;gt;STOP!&amp;lt;/button&amp;gt;
  &amp;lt;button id="back"&amp;gt;Back&amp;lt;/button&amp;gt;
  &amp;lt;div class="block"&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="submit" scope="instance">
        <description>This causes all of the functions that have been bound to that submit event to be executed, and calls the browser's default submit action on the matching element(s). This default action can be prevented by returning false from one of the functions bound to the submit event.</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To trigger the submit event on the first form on the page, try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("form:first").submit();
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="submit" scope="instance">
        <description>The select event fires when a form is submitted</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>A function to bind to the submit event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            If you'd like to prevent forms from being submitted unless a flag variable is set, try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("form").submit(function() {
      if ($("input:first").val() == "correct") {
        $("span").text("Validated...").show();
        return true;
      }
      $("span").text("Not valid!").show().fadeOut(1000);
      return false;
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Type 'correct' to validate.&amp;lt;/p&amp;gt;
  &amp;lt;form action="javascript:alert('success!');"&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;input type="text" /&amp;gt;
      &amp;lt;input type="submit" /&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
  &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            If you'd like to prevent forms from being submitted unless a flag variable is set, try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("form").submit( function () {
  return this.some_flag_variable;
} );
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="text" scope="instance">
        <description>The result is a string that contains the combined text contents of all matched elements. This method works on both HTML and XML documents.  Cannot be used on input elements.  For input field text use the &amp;lt;a href='Attributes/val#val'&amp;gt;val attribute&amp;lt;/a&amp;gt;.</description>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Find the text in the first paragraph (stripping out the html), then set the html of the last paragraph to show it is just text (the red bold is gone).
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var str = $("p:first").text();
    $("p:last").html(str);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Test&amp;lt;/b&amp;gt; Paragraph.&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="text" scope="instance">
        <description>The result is a string that contains the combined text contents of all matched elements. This method works on both HTML and XML documents.  Cannot be used on input elements.  For input field text use the &amp;lt;a href='Attributes/val#val'&amp;gt;val attribute&amp;lt;/a&amp;gt;.</description>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Find the text in the first paragraph (stripping out the html), then set the html of the last paragraph to show it is just text (the red bold is gone).
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var str = $("p:first").text();
    $("p:last").html(str);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Test&amp;lt;/b&amp;gt; Paragraph.&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="text" scope="instance">
        <description>Similar to html(), but escapes HTML (replace "&amp;lt;" and "&amp;gt;" with their HTML entities).  Cannot be used on input elements.  For input field text use the &amp;lt;a href='Attributes/val#val'&amp;gt;val attribute&amp;lt;/a&amp;gt;.
</description>
        <parameters>
          <parameter name="val" usage="required" type="String">
            <description>The text value to set the contents of the element to.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Add text to the paragraph (notice the bold tag is escaped).
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").text("&amp;lt;b&amp;gt;Some&amp;lt;/b&amp;gt; new text.");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Test Paragraph.&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="text" scope="instance">
        <description>Similar to html(), but escapes HTML (replace "&amp;lt;" and "&amp;gt;" with their HTML entities).  Cannot be used on input elements.  For input field text use the &amp;lt;a href='Attributes/val#val'&amp;gt;val attribute&amp;lt;/a&amp;gt;.
</description>
        <parameters>
          <parameter name="val" usage="required" type="String">
            <description>The text value to set the contents of the element to.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Add text to the paragraph (notice the bold tag is escaped).
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").text("&amp;lt;b&amp;gt;Some&amp;lt;/b&amp;gt; new text.");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Test Paragraph.&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="toggle" scope="instance">
        <description>If they are shown, toggle makes them hidden (using the hide method). If they are hidden, toggle makes them shown (using the show method).</description>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Toggles all paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $("p").toggle();
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Toggle&amp;lt;/button&amp;gt;
  &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p style="display: none"&amp;gt;Good Bye&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="toggle" scope="instance">
        <description>If the switch is true, toggle makes them hidden (using the hide method). If the switch is false, toggle makes them shown (using the show method).</description>
        <parameters>
          <parameter name="switch" usage="required" type="Boolean">
            <description>A switch to toggle the display on.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Shows all paragraphs, then hides them all, back and forth.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var flip = 0;
    $("button").click(function () {
      $("p").toggle( flip++ % 2 == 0 );
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Toggle&amp;lt;/button&amp;gt;
  &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p style="display: none"&amp;gt;Good Bye&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="toggle" scope="instance">
        <description>The height, width, and opacity of each of the matched elements are changed dynamically according to the specified speed. As of jQuery 1.3 the padding and margin are also animated, creating a smoother effect.</description>
        <parameters>
          <parameter name="speed" usage="required" type="String, Number">
            <description>A string representing one of the three predefined speeds ("slow", "normal", or "fast") or the number of milliseconds to run the animation (e.g. 1000).</description>
          </parameter>
          <parameter name="callback" usage="optional" type="Function">
            <description>A function to be executed whenever the animation completes, executes once for each element animated against.
&amp;lt;pre&amp;gt;function callback() {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      $("p").toggle("slow");
    });    

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Toggle 'em&amp;lt;/button&amp;gt;
  &amp;lt;p&amp;gt;Hiya&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Such interesting text, eh?&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="toggle" scope="instance">
        <description>&amp;lt;p&amp;gt;Whenever a matched element is clicked, the first specified function is fired, when clicked again, the second is fired, and so on. All subsequent clicks continue to rotate through the functions.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Use unbind("click") to remove the toggle event.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>The function to execute.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
          <parameter name="fn2" usage="required" type="Function">
            <description>The function to execute.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
          <parameter name="fn3,fn4,..." usage="optional" type="Function">
            <description>The function to execute.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Click to toggle highlight on the list item.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("li").toggle(
      function () {
        $(this).css({"list-style-type":"disc", "color":"blue"});
      },
      function () {
        $(this).css({"list-style-type":"disc", "color":"red"});
      },
      function () {
        $(this).css({"list-style-type":"", "color":""});
      }
    );

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Go to the store&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Pick up dinner&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Debug crash&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Take a jog&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To toggle a style on table cells:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("td").toggle(
  function () {
    $(this).addClass("selected");
  },
  function () {
    $(this).removeClass("selected");
  }
);
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="toggleClass" scope="instance">
        <description/>
        <parameters>
          <parameter name="class" usage="required" type="String">
            <description>A CSS class to toggle on the elements.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Toggle the class 'highlight' when a paragraph is clicked.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("p").click(function () {
      $(this).toggleClass("highlight");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p class="blue"&amp;gt;Click to toggle&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue highlight"&amp;gt;highlight&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue"&amp;gt;on these&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue"&amp;gt;paragraphs&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="toggleClass" scope="instance">
        <description/>
        <parameters>
          <parameter name="class" usage="required" type="String">
            <description>A CSS class to toggle on the elements.</description>
          </parameter>
          <parameter name="switch" usage="required" type="Boolean">
            <description>A boolean value to toggle the class by.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Toggle the class 'highlight' on every third click.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    var count = 0;
    $("p").click(function(){
      $(this).toggleClass("highlight", count++ % 3 == 0);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p class="blue"&amp;gt;Click to toggle&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue highlight"&amp;gt;highlight&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue"&amp;gt;on these&amp;lt;/p&amp;gt;
  &amp;lt;p class="blue"&amp;gt;paragraphs&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="trigger" scope="instance">
        <description>&amp;lt;p&amp;gt;This will also cause the default action of the browser with the same name (if one exists) to be executed. For example, passing 'submit' to the trigger() function will also cause the browser to submit the form. This default action can be prevented by returning false from one of the functions bound to the event.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Triggered events aren't limited to browser-based events, you can also trigger custom events registered with bind.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;The event handlers will receive a fixed (normalized) event object but it won't contain any of the browser-specific attributes (like keyCode, pageX, or pageY).&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;jQuery also supports &amp;lt;a href='Namespaced_Events'&amp;gt;namespaced events&amp;lt;/a&amp;gt;. These allow you to trigger or unbind specific groups of bound handlers without having to reference them directly. You can add an '''!''' to the end of the event type in order to trigger only handlers that don't have a namespace specified.&amp;lt;/p&amp;gt;

'''New in jQuery 1.3:'''

&amp;lt;p&amp;gt;All triggered events now bubble up the DOM tree. For example if you trigger an event on a paragraph then it will trigger on that element first, then on the parent element, and its parent, and so on up to the document. The event object will have a .target property equal to the original triggered element. You can prevent the bubbling by calling &amp;lt;a href='Events/jQuery.Event#event.stopPropagation()'&amp;gt;stopPropagation()&amp;lt;/a&amp;gt; or by returning false from your callback.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;The event object constructor is now exposed and you can use it to create your own event object. 
The full list of properties that are available on the event object (passed to the triggered bound handlers) can be found in the &amp;lt;a href='Events/jQuery.Event'&amp;gt;jQuery.Event&amp;lt;/a&amp;gt; documentation.&amp;lt;/p&amp;gt;

&amp;lt;P&amp;gt;You have 3 ways of specifying the event type:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;You can pass the event name (type) which is a string
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;You can also use a &amp;lt;a href='Events/jQuery.Event'&amp;gt;jQuery.Event object&amp;lt;/a&amp;gt;.
You can put data into this object and it will reach the triggered handlers.
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Finally, you can pass a literal object with data. It will be copied to a real &amp;lt;a href='Events/jQuery.Event'&amp;gt;jQuery.Event object&amp;lt;/a&amp;gt;.
Note that you '''must''' specify a ''type'' attribute in this case.
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
</description>
        <parameters>
          <parameter name="event " usage="required" type="String,Event,Object">
            <description>An event object or type to trigger.</description>
          </parameter>
          <parameter name="data " usage="optional" type="Array">
            <description>Additional data to pass as arguments (after the event object) to the event handler.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Clicks to button #2 also trigger a click for button #1.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button:first").click(function () {
      update($("span:first"));
    });
    $("button:last").click(function () {
      $("button:first").trigger('click');

      update($("span:last"));
    });

    function update(j) {
      var n = parseInt(j.text(), 10);
      j.text(n + 1);
    }

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button&amp;gt;Button #1&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;Button #2&amp;lt;/button&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;0&amp;lt;/span&amp;gt; button #1 clicks.&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;0&amp;lt;/span&amp;gt; button #2 clicks.&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To submit the first form without using the submit() function, try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("form:first").trigger("submit")
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To submit the first form without using the submit() function, try:
            &lt;/p&gt;
        
            &lt;pre&gt;
            var event = jQuery.Event("submit");
$("form:first").trigger(event);
if ( event.isDefaultPrevented() ) {
  // Perform an action...
}
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To pass arbitrary data to an event:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").click( function (event, a, b) {
  // when a normal click fires, a and b are undefined
  // for a trigger like below a refers too "foo" and b refers to "bar"
} ).trigger("click", ["foo", "bar"]);
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To pass arbitrary data through an event object:
            &lt;/p&gt;
        
            &lt;pre&gt;
            var event = jQuery.Event("logged");
event.user = "foo";
event.pass = "bar";
$("body").trigger(event);
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Alternate way to pass data through an event object:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("body").trigger({
  type:"logged",
  user:"foo",
  pass:"bar"
});
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="triggerHandler" scope="instance">
        <description>&amp;lt;p&amp;gt;This method behaves very similarly to the trigger method, with two major exceptions:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;First, no default browser actions are triggered.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Second, the event is only triggered on the first element within the jQuery collection.  This method returns the return value of the triggered handler instead of a chainable jQuery object.  Also, if the jQuery collection is empty, this method returns 'undefined'.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="event " usage="required" type="String,Event,Object">
            <description>An event type to trigger.</description>
          </parameter>
          <parameter name="data " usage="optional" type="Array">
            <description>Additional data to pass as arguments (after the event object) to the event handler.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            If you called .triggerHandler() on a focus event - the browsers default focus action would not be triggered, only the event handlers bound to the focus event.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("#old").click(function(){
      $("input").trigger("focus");
    });
    $("#new").click(function(){
      $("input").triggerHandler("focus");
    });
    $("input").focus(function(){
      $("&amp;lt;span&amp;gt;Focused!&amp;lt;/span&amp;gt;").appendTo("body").fadeOut(1000);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="old"&amp;gt;.trigger("focus")&amp;lt;/button&amp;gt;
  &amp;lt;button id="new"&amp;gt;.triggerHandler("focus")&amp;lt;/button&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
  &amp;lt;input type="text" value="To Be Focused"/&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="unbind" scope="instance">
        <description>&amp;lt;p&amp;gt;Without any arguments, all bound events are removed. If the type is provided, all bound events of that type are removed. If the function that was passed to bind is provided as the second argument, only that specific event handler is removed.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;You can also unbind custom events registered with bind.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;jQuery also supports &amp;lt;a href='Namespaced_Events'&amp;gt;namespaced events&amp;lt;/a&amp;gt;. These allow you to trigger or unbind specific groups of bound handlers without having to reference them directly.&amp;lt;/p&amp;gt;</description>
        <parameters>
          <parameter name="type " usage="optional" type="String,Event,Object">
            <description>An event type to unbind.</description>
          </parameter>
          <parameter name="fn " usage="optional" type="Function">
            <description>A function to unbind from the event on each of the set of matched elements.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Can bind and unbind events to the colored button.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    function aClick() {
      $("div").show().fadeOut("slow");
    }
    $("#bind").click(function () {
      // could use .bind('click', aClick) instead but for variety...
      $("#theone").click(aClick)
                  .text("Can Click!");
    });
    $("#unbind").click(function () {
      $("#theone").unbind('click', aClick)
                  .text("Does nothing...");
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="theone"&amp;gt;Does nothing...&amp;lt;/button&amp;gt;
  &amp;lt;button id="bind"&amp;gt;Bind Click&amp;lt;/button&amp;gt;
  &amp;lt;button id="unbind"&amp;gt;Unbind Click&amp;lt;/button&amp;gt;
  &amp;lt;div style="display:none;"&amp;gt;Click!&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To unbind all events from all paragraphs, write:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").unbind()
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To unbind all click events from all paragraphs, write:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").unbind( "click" )
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            To unbind just one previously bound handler, pass the function in as the second argument:
            &lt;/p&gt;
        
            &lt;pre&gt;
            var foo = function () {
  // code to handle some kind of event
};

$("p").bind("click", foo); // ... now foo will be called when paragraphs are clicked ...

$("p").unbind("click", foo); // ... foo will no longer be called.
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="unload" scope="instance">
        <description/>
        <parameters>
          <parameter name="fn" usage="required" type="Function">
            <description>function to bind to the unload event on each of the matched elements.
&amp;lt;pre&amp;gt;function callback(eventObject) {
  this; // dom element
}
&amp;lt;/pre&amp;gt;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To display an alert when a page is unloaded:
            &lt;/p&gt;
        
            &lt;pre&gt;
            $(window).unload( function () { alert("Bye now!"); } );
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="val" scope="instance">
        <description>In jQuery 1.2, a value is now returned for all elements, including selects. For multiple selects an array of values is returned.

For selects and checkboxes, see the &amp;lt;a href='Selectors/selected'&amp;gt;:selected&amp;lt;/a&amp;gt; and &amp;lt;a href='Selectors/checked'&amp;gt;:checked&amp;lt;/a&amp;gt; selectors, for example:
&amp;lt;pre&amp;gt;
$('select#foo option:selected').val();    // get the value from a dropdown select
$('input:checkbox:checked').val();        // get the value from a checked checkbox
$('input:radio[name=bar]:checked').val(); // get the value from a set of radio buttons

&amp;lt;/pre&amp;gt;

&amp;lt;small&amp;gt;For older versions of jQuery use the [http://www.malsup.com/jquery/form/#fields fieldValue function of the Form Plugin].&amp;lt;/small&amp;gt;</description>
        <return-types>
          <return-type type="String"/>
          <return-type type="Array"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Get the single value from a single select and an array of values from a multiple select and display their values.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    function displayVals() {
      var singleValues = $("#single").val();
      var multipleValues = $("#multiple").val() || [];
      $("p").html("&amp;lt;b&amp;gt;Single:&amp;lt;/b&amp;gt; " + 
                  singleValues +
                  " &amp;lt;b&amp;gt;Multiple:&amp;lt;/b&amp;gt; " + 
                  multipleValues.join(", "));
    }

    $("select").change(displayVals);
    displayVals();

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;select id="single"&amp;gt;
    &amp;lt;option&amp;gt;Single&amp;lt;/option&amp;gt;
    &amp;lt;option&amp;gt;Single2&amp;lt;/option&amp;gt;
  &amp;lt;/select&amp;gt;
  &amp;lt;select id="multiple" multiple="multiple"&amp;gt;
    &amp;lt;option selected="selected"&amp;gt;Multiple&amp;lt;/option&amp;gt;
    &amp;lt;option&amp;gt;Multiple2&amp;lt;/option&amp;gt;
    &amp;lt;option selected="selected"&amp;gt;Multiple3&amp;lt;/option&amp;gt;
  &amp;lt;/select&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Find the value of an input box.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("input").keyup(function () {
      var value = $(this).val();
      $("p").text(value);
    }).keyup();

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;input type="text" value="some text"/&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="val" scope="instance">
        <description>In jQuery 1.2, this is also able to set the value of select elements, but selecting the appropriate options.</description>
        <parameters>
          <parameter name="val" usage="required" type="String">
            <description>The value to set on the matched element.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Set the value of an input box.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("button").click(function () {
      var text = $(this).text();
      $("input").val(text);
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;
    &amp;lt;button&amp;gt;Feed&amp;lt;/button&amp;gt;
    &amp;lt;button&amp;gt;the&amp;lt;/button&amp;gt;
    &amp;lt;button&amp;gt;Input&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;input type="text" value="click a button" /&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="val" scope="instance">
        <description/>
        <parameters>
          <parameter name="val" usage="required" type="Array&lt;String&gt;">
            <description>The set of values to check/select.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Set a single select and a multiple select .
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("#single").val("Single2");
    $("#multiple").val(["Multiple2", "Multiple3"]);
    $("input").val(["check1","check2", "radio1" ]);

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;select id="single"&amp;gt;
    &amp;lt;option&amp;gt;Single&amp;lt;/option&amp;gt;
    &amp;lt;option&amp;gt;Single2&amp;lt;/option&amp;gt;
  &amp;lt;/select&amp;gt;
  &amp;lt;select id="multiple" multiple="multiple"&amp;gt;
    &amp;lt;option selected="selected"&amp;gt;Multiple&amp;lt;/option&amp;gt;
    &amp;lt;option&amp;gt;Multiple2&amp;lt;/option&amp;gt;
    &amp;lt;option selected="selected"&amp;gt;Multiple3&amp;lt;/option&amp;gt;
  &amp;lt;/select&amp;gt;&amp;lt;br/&amp;gt;
  &amp;lt;input type="checkbox" name="checkboxname" value="check1"/&amp;gt; check1
  &amp;lt;input type="checkbox" name="checkboxname" value="check2"/&amp;gt; check2
  &amp;lt;input type="radio"  name="r" value="radio1"/&amp;gt; radio1
  &amp;lt;input type="radio"  name="r" value="radio2"/&amp;gt; radio2
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="width" scope="instance">
        <description>In jQuery 1.2, this method is able to find the width of the window and document.</description>
        <return-types>
          <return-type type="Integer"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Show various widths.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    function showWidth(ele, w) {
      $("div").text("The width for the " + ele + 
                    " is " + w + "px.");
    }
    $("#getp").click(function () { 
      showWidth("paragraph", $("p").width()); 
    });
    $("#getd").click(function () { 
      showWidth("document", $(document).width()); 
    });
    $("#getw").click(function () { 
      showWidth("window", $(window).width()); 
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;button id="getp"&amp;gt;Get Paragraph Width&amp;lt;/button&amp;gt;
  &amp;lt;button id="getd"&amp;gt;Get Document Width&amp;lt;/button&amp;gt;
  &amp;lt;button id="getw"&amp;gt;Get Window Width&amp;lt;/button&amp;gt;
  &amp;lt;div&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;
    Sample paragraph to test width
  &amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="width" scope="instance">
        <description>If no explicit unit was specified (like 'em' or '%') then "px" is concatenated to the value.</description>
        <parameters>
          <parameter name="val" usage="required" type="String, Number">
            <description>Set the CSS 'width' property to the specified value.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            To set the width of each div on click to 30px plus a color change.
            &lt;/p&gt;
        
            &lt;pre&gt;
            
    $("div").one('click', function () {
      $(this).width(30)
             .css({cursor:"auto", "background-color":"blue"});
    });

            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;d&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;d&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;d&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;d&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="wrap" scope="instance">
        <description>This wrapping process is most useful for injecting additional structure into a document, without ruining the original semantic qualities of a document.

This works by going through the first element provided (which is generated, on the fly, from the provided HTML) and finds the deepest descendant element within its structure -- it is that element that will enwrap everything else.</description>
        <parameters>
          <parameter name="html" usage="required" type="String">
            <description>A string of HTML that will be created on the fly and wrapped around each target.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Wrap a new div around all of the paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").wrap("&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &amp;lt;strong&amp;gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("span").wrap("&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;span&amp;gt;Span Text&amp;lt;/span&amp;gt;
  &amp;lt;strong&amp;gt;What about me?&amp;lt;/strong&amp;gt;
  &amp;lt;span&amp;gt;Another One&amp;lt;/span&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="wrap" scope="instance">
        <description/>
        <parameters>
          <parameter name="elem" usage="required" type="Element">
            <description>A DOM element that will be wrapped around each target.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Wrap a new div around all of the paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").wrap(document.createElement("div"));
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").wrap($(".doublediv"));
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
  &amp;lt;div class="doublediv"&amp;gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="wrapAll" scope="instance">
        <description>This is different from &amp;lt;a href='Manipulation/wrap'&amp;gt;.wrap()&amp;lt;/a&amp;gt; where each element in the matched set would get wrapped with an element.

This wrapping process is most useful for injecting additional structure into a document, without ruining the original semantic qualities of a document.

This works by going through the first element provided (which is generated, on the fly, from the provided HTML) and finds the deepest descendant element within its structure -- it is that element that will enwrap everything else.</description>
        <parameters>
          <parameter name="html" usage="required" type="String">
            <description>A string of HTML that will be created on the fly and wrapped around the target.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Wrap a new div around all of the paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").wrapAll("&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &amp;lt;strong&amp;gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("span").wrapAll("&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;span&amp;gt;Span Text&amp;lt;/span&amp;gt;
  &amp;lt;strong&amp;gt;What about me?&amp;lt;/strong&amp;gt;
  &amp;lt;span&amp;gt;Another One&amp;lt;/span&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="wrapAll" scope="instance">
        <description>This is different from &amp;lt;a href='Manipulation/wrap'&amp;gt;.wrap()&amp;lt;/a&amp;gt; where each element in the matched set would get wrapped with an element.</description>
        <parameters>
          <parameter name="elem" usage="required" type="Element">
            <description>A DOM element that will be wrapped around the target.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Wrap a new div around all of the paragraphs.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").wrapAll(document.createElement("div"));
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").wrapAll($(".doublediv"));
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
  &amp;lt;div class="doublediv"&amp;gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="wrapInner" scope="instance">
        <description>This wrapping process is most useful for injecting additional structure into a document, without ruining the original semantic qualities of a document.

This works by going through the first element provided (which is generated, on the fly, from the provided HTML) and finds the deepest ancestor element within its structure -- it is that element that will enwrap everything else.</description>
        <parameters>
          <parameter name="html" usage="required" type="String">
            <description>A string of HTML that will be created on the fly and wrapped around the target.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Selects all paragraphs and wraps a bold tag around each of its contents.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").wrapInner("&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Wraps a newly created tree of objects around the inside of the body.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("body").wrapInner("&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;");
            &lt;/pre&gt;
        
            &lt;pre&gt;
            Plain old text, or is it?
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
      <method name="wrapInner" scope="instance">
        <description/>
        <parameters>
          <parameter name="elem" usage="required" type="Element">
            <description>A DOM element that will be wrapped around the target.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <examples>
          <example>
            &lt;p&gt;
            Selects all paragraphs and wraps a bold tag around each of its contents.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").wrapInner(document.createElement("b"));
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
          <example>
            &lt;p&gt;
            Selects all paragraphs and wraps a jQuery object around each of its contents.
            &lt;/p&gt;
        
            &lt;pre&gt;
            $("p").wrapInner($("&amp;lt;span class='red'&amp;gt;&amp;lt;/span&amp;gt;"));
            &lt;/pre&gt;
        
            &lt;pre&gt;
            &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;cruel&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;World&amp;lt;/p&amp;gt;
            &lt;/pre&gt;
        </example>
        </examples>
      </method>
    </methods>
  </class>
</javascript>